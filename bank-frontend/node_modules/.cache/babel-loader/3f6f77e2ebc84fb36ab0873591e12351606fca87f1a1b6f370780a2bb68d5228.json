{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watchEffect } from 'vue';\nimport { LineChart } from 'vue-chart-3';\nimport { Chart, registerables } from 'chart.js';\nimport axios from 'axios';\nChart.register(...registerables);\nexport default {\n  components: {\n    LineChart\n  },\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [{\n        label: 'Solde',\n        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n        borderColor: 'rgb(54, 162, 235)',\n        fill: false,\n        data: []\n      }]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    });\n    async function fetchAccountDetailsAndTransactions() {\n      try {\n        const accountId = props.accountId;\n        const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        const accountDetails = accountResponse.data;\n        console.log('Account Details:', accountDetails); // Debug log\n\n        const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        const transactions = transactionsResponse.data;\n        console.log('Transactions:', transactions); // Debug log\n\n        updateChartData(accountDetails, transactions);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données', error);\n      }\n    }\n    watchEffect(() => {\n      if (props.accountId) {\n        fetchAccountDetailsAndTransactions();\n      }\n    });\n    function updateChartData(accountDetails, transactions) {\n      chartData.value.labels = [];\n      chartData.value.datasets[0].data = [];\n\n      // Assurez-vous que accountDetails.initialBalance est bien défini\n      let currentBalance = accountDetails.initialBalance;\n\n      // Trier les transactions par date\n      const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n      sortedTransactions.forEach(transaction => {\n        let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n        if (transaction.category.toLowerCase() === 'dépense') {\n          currentBalance -= transaction.amount;\n        } else {\n          currentBalance += transaction.amount;\n        }\n        chartData.value.labels.push(transactionDate);\n        chartData.value.datasets[0].data.push(currentBalance);\n      });\n      console.log('Sorted Transactions:', sortedTransactions); // Debug log\n      console.log('Chart Data after update:', chartData.value); // Debug log\n    }\n\n    return {\n      chartData,\n      chartOptions\n    };\n  }\n};","map":{"version":3,"names":["ref","watchEffect","LineChart","Chart","registerables","axios","register","components","props","accountId","type","Number","required","setup","chartData","labels","datasets","label","backgroundColor","borderColor","fill","data","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","fetchAccountDetailsAndTransactions","accountResponse","get","accountDetails","console","log","transactionsResponse","transactions","updateChartData","error","value","currentBalance","initialBalance","sortedTransactions","sort","a","b","Date","date","forEach","transaction","transactionDate","toLocaleDateString","category","toLowerCase","amount","push"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, watchEffect } from 'vue';\n  import { LineChart } from 'vue-chart-3';\n  import { Chart, registerables } from 'chart.js';\n  import axios from 'axios';\n  \n  Chart.register(...registerables);\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    props: {\n      accountId: {\n        type: Number,\n        required: true,\n      },\n    },\n    setup(props) {\n      const chartData = ref({\n        labels: [],\n        datasets: [\n          {\n            label: 'Solde',\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\n            borderColor: 'rgb(54, 162, 235)',\n            fill: false,\n            data: [],\n          },\n        ],\n      });\n      const chartOptions = ref({\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: false,\n          },\n        },\n      });\n  \n      async function fetchAccountDetailsAndTransactions() {\n  try {\n    const accountId = props.accountId;\n    const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n    const accountDetails = accountResponse.data;\n    console.log('Account Details:', accountDetails); // Debug log\n\n    const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n    const transactions = transactionsResponse.data;\n    console.log('Transactions:', transactions); // Debug log\n\n    updateChartData(accountDetails, transactions);\n  } catch (error) {\n    console.error('Erreur lors de la récupération des données', error);\n  }\n\n      }\n  \n      watchEffect(() => {\n        if (props.accountId) {\n          fetchAccountDetailsAndTransactions();\n        }\n      });\n  \n      function updateChartData(accountDetails, transactions) {\n        chartData.value.labels = [];\n        chartData.value.datasets[0].data = [];\n  \n        // Assurez-vous que accountDetails.initialBalance est bien défini\n        let currentBalance = accountDetails.initialBalance;\n  \n        // Trier les transactions par date\n        const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n  \n        sortedTransactions.forEach((transaction) => {\n          let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n          if (transaction.category.toLowerCase() === 'dépense') {\n            currentBalance -= transaction.amount;\n          } else {\n            currentBalance += transaction.amount;\n          }\n          chartData.value.labels.push(transactionDate);\n          chartData.value.datasets[0].data.push(currentBalance);\n        });\n        console.log('Sorted Transactions:', sortedTransactions); // Debug log\n  console.log('Chart Data after update:', chartData.value); // Debug log\n      }\n  \n      return {\n        chartData,\n        chartOptions,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your styles here */\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}