{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_line_chart = _resolveComponent(\"line-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_line_chart, {\n    \"chart-data\": $setup.chartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"chart-data\", \"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_line_chart","$setup","chartData","options","chartOptions"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n</template>\n\n<script>\nimport { ref, watchEffect } from 'vue';\nimport { LineChart } from 'vue-chart-3';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nexport default {\n  components: {\n    LineChart,\n  },\n  props: {\n    transactions: {\n      type: Array,\n      required: true,\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [\n        {\n          label: 'Total Dépenses',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: []\n        },\n        {\n          label: 'Total Revenus',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n          borderColor: 'rgb(75, 192, 192)',\n          fill: false,\n          data: []\n        },\n        {\n          label: 'Solde',\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgb(54, 162, 235)',\n          fill: false,\n          data: []\n        }\n      ]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    });\n\n    watchEffect(() => {\n      if (props.transactions && props.transactions.length > 0) {\n        updateChartData(props.transactions);\n      }\n    });\n\n    function updateChartData(transactions) {\n      chartData.value.labels = [];\n      chartData.value.datasets[0].data = []; // Dépenses\n      chartData.value.datasets[1].data = []; // Revenus\n      chartData.value.datasets[2].data = []; // Solde\n      const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n      let totalExpenses = 0;\n      let totalRevenues = 0;\n      let balance = 0;\n\n      sortedTransactions.forEach(transaction => {\n        let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n        chartData.value.labels.push(transactionDate);\n\n        if (transaction.category === 'Dépense') {\n          totalExpenses += Math.abs(transaction.amount); // Les dépenses sont négatives\n          balance += transaction.amount;\n        } else {\n          totalRevenues += transaction.amount;\n          balance += transaction.amount;\n        }\n\n        chartData.value.datasets[0].data.push(totalExpenses);\n        chartData.value.datasets[1].data.push(totalRevenues);\n        chartData.value.datasets[2].data.push(balance);\n      });\n    }\n\n    return {\n      chartData,\n      chartOptions\n    };\n  },\n};\n</script>\n"],"mappings":";;;uBACIA,mBAAA,CAEM,cADJC,YAAA,CAA8DC,qBAAA;IAAjD,YAAU,EAAEC,MAAA,CAAAC,SAAS;IAAGC,OAAO,EAAEF,MAAA,CAAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}