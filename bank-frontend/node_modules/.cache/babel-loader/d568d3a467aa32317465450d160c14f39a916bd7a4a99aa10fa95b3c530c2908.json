{"ast":null,"code":"import axios from 'axios';\nimport AccountInfo from '../components/AccountInfo.vue';\nimport AccountChart from '../components/AccountChart.vue';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nexport default {\n  name: 'AccountDetails',\n  components: {\n    AccountInfo,\n    AccountChart,\n    TransactionForm,\n    TransactionList\n  },\n  data() {\n    return {\n      selectedAccount: null,\n      loading: true,\n      // Pour gérer l'affichage pendant le chargement des données\n      error: null // Pour gérer l'affichage en cas d'erreur\n    };\n  },\n\n  async created() {\n    try {\n      const accountId = this.$route.params.id; // Récupère l'identifiant du compte à partir de l'URL\n\n      // Récupérer les détails du compte\n      const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n      this.selectedAccount = accountResponse.data;\n\n      // Récupérer le total des revenus\n      const totalIncomeResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/total-revenues`);\n      this.selectedAccount.totalIncome = totalIncomeResponse.data.totalIncome;\n\n      // Récupérer le total des dépenses\n      const totalExpensesResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/total-expenses`);\n      this.selectedAccount.totalExpenses = totalExpensesResponse.data.totalExpenses;\n    } catch (error) {\n      console.error('Erreur lors du chargement des détails du compte:', error);\n      this.error = 'Impossible de charger les informations du compte.';\n    } finally {\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","AccountInfo","AccountChart","TransactionForm","TransactionList","name","components","data","selectedAccount","loading","error","created","accountId","$route","params","id","accountResponse","get","totalIncomeResponse","totalIncome","totalExpensesResponse","totalExpenses","console"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div v-if=\"selectedAccount\">\n\n    <!-- Display Account Information -->\n    <AccountInfo :account=\"selectedAccount\" />\n\n    <!-- Display Account Chart -->\n    <AccountChart :account=\"selectedAccount\" />\n\n    <!-- Transaction Form -->\n    <TransactionForm :account=\"selectedAccount\" />\n\n    <!-- Transaction List -->\n    <TransactionList :account=\"selectedAccount\" />\n  </div>\n  <div v-else>\n    <p>Chargement des détails du compte...</p>\n    <!-- Vous pouvez ajouter un spinner de chargement ici -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport AccountInfo from '../components/AccountInfo.vue';\nimport AccountChart from '../components/AccountChart.vue';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    AccountInfo,\n    AccountChart,\n    TransactionForm,\n    TransactionList,\n  },\n  data() {\n    return {\n      selectedAccount: null,\n      loading: true, // Pour gérer l'affichage pendant le chargement des données\n      error: null, // Pour gérer l'affichage en cas d'erreur\n    };\n  },\n  async created() {\n    try {\n        const accountId = this.$route.params.id; // Récupère l'identifiant du compte à partir de l'URL\n\n        // Récupérer les détails du compte\n        const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.selectedAccount = accountResponse.data;\n\n        // Récupérer le total des revenus\n        const totalIncomeResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/total-revenues`);\n        this.selectedAccount.totalIncome = totalIncomeResponse.data.totalIncome;\n\n        // Récupérer le total des dépenses\n        const totalExpensesResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/total-expenses`);\n        this.selectedAccount.totalExpenses = totalExpensesResponse.data.totalExpenses;\n\n    } catch (error) {\n        console.error('Erreur lors du chargement des détails du compte:', error);\n        this.error = 'Impossible de charger les informations du compte.';\n    } finally {\n        this.loading = false;\n    }\n\n\n  },\n};\n</script>\n"],"mappings":"AAsBA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,WAAU,MAAO,+BAA+B;AACvD,OAAOC,YAAW,MAAO,gCAAgC;AACzD,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAE/D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVL,WAAW;IACXC,YAAY;IACZC,eAAe;IACfC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE,IAAI;MAAE;MACfC,KAAK,EAAE,IAAI,CAAE;IACf,CAAC;EACH,CAAC;;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACA,MAAMC,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE;;MAEzC;MACA,MAAMC,eAAc,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAE,kCAAiCL,SAAU,EAAC,CAAC;MACtF,IAAI,CAACJ,eAAc,GAAIQ,eAAe,CAACT,IAAI;;MAE3C;MACA,MAAMW,mBAAkB,GAAI,MAAMlB,KAAK,CAACiB,GAAG,CAAE,kCAAiCL,SAAU,iBAAgB,CAAC;MACzG,IAAI,CAACJ,eAAe,CAACW,WAAU,GAAID,mBAAmB,CAACX,IAAI,CAACY,WAAW;;MAEvE;MACA,MAAMC,qBAAoB,GAAI,MAAMpB,KAAK,CAACiB,GAAG,CAAE,kCAAiCL,SAAU,iBAAgB,CAAC;MAC3G,IAAI,CAACJ,eAAe,CAACa,aAAY,GAAID,qBAAqB,CAACb,IAAI,CAACc,aAAa;IAEjF,EAAE,OAAOX,KAAK,EAAE;MACZY,OAAO,CAACZ,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MACxE,IAAI,CAACA,KAAI,GAAI,mDAAmD;IACpE,UAAU;MACN,IAAI,CAACD,OAAM,GAAI,KAAK;IACxB;EAGF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}