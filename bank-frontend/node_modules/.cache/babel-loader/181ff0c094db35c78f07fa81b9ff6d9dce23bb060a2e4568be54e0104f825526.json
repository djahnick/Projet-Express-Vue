{"ast":null,"code":"export default {\n  name: 'AccountInfo',\n  props: {\n    accountId: Number // Assuming you pass the account ID as a prop\n  },\n\n  data() {\n    return {\n      accountData: null,\n      totalIncome: 0,\n      totalExpenses: 0,\n      currentBalance: 0\n    };\n  },\n  created() {\n    this.fetchAccountData();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n      try {\n        const accountResponse = await fetch(accountUrl);\n        const incomeResponse = await fetch(incomeUrl);\n        const expensesResponse = await fetch(expensesUrl);\n        if (accountResponse.ok && incomeResponse.ok && expensesResponse.ok) {\n          const accountData = await accountResponse.json();\n          const incomeData = await incomeResponse.json();\n          const expensesData = await expensesResponse.json();\n          this.accountData = accountData;\n          this.totalIncome = incomeData.totalIncome;\n          this.totalExpenses = expensesData.totalExpenses;\n          this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n        }\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","accountId","Number","data","accountData","totalIncome","totalExpenses","currentBalance","created","fetchAccountData","methods","accountUrl","incomeUrl","expensesUrl","accountResponse","fetch","incomeResponse","expensesResponse","ok","json","incomeData","expensesData","initialBalance","error","console"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountInfo.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Account Information</h2>\n    <div v-if=\"accountData\">\n      <p><strong>Account Name:</strong> {{ accountData.accountName }}</p>\n      <p><strong>Initial Balance:</strong> {{ accountData.initialBalance }} {{ accountData.currency }}</p>\n      <p><strong>Current Balance:</strong> {{ currentBalance }} {{ accountData.currency }}</p>\n      <p><strong>Total Income:</strong> {{ totalIncome }} {{ accountData.currency }}</p>\n      <p><strong>Total Expenses:</strong> {{ totalExpenses }} {{ accountData.currency }}</p>\n    </div>\n    <div v-else>\n      <p>No account selected.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'AccountInfo',\n  props: {\n    accountId: Number, // Assuming you pass the account ID as a prop\n  },\n  data() {\n    return {\n      accountData: null,\n      totalIncome: 0,\n      totalExpenses: 0,\n      currentBalance: 0,\n    };\n  },\n  created() {\n    this.fetchAccountData();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n\n      try {\n        const accountResponse = await fetch(accountUrl);\n        const incomeResponse = await fetch(incomeUrl);\n        const expensesResponse = await fetch(expensesUrl);\n\n        if (accountResponse.ok && incomeResponse.ok && expensesResponse.ok) {\n          const accountData = await accountResponse.json();\n          const incomeData = await incomeResponse.json();\n          const expensesData = await expensesResponse.json();\n\n          this.accountData = accountData;\n          this.totalIncome = incomeData.totalIncome;\n          this.totalExpenses = expensesData.totalExpenses;\n          this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n        }\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAiBA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,SAAS,EAAEC,MAAM,CAAE;EACrB,CAAC;;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,gBAAgBA,CAAA,EAAG;MACvB;MACA,MAAME,UAAS,GAAK,kCAAiC,IAAI,CAACV,SAAU,EAAC;MACrE,MAAMW,SAAQ,GAAK,kCAAiC,IAAI,CAACX,SAAU,sBAAqB;MACxF,MAAMY,WAAU,GAAK,kCAAiC,IAAI,CAACZ,SAAU,wBAAuB;MAE5F,IAAI;QACF,MAAMa,eAAc,GAAI,MAAMC,KAAK,CAACJ,UAAU,CAAC;QAC/C,MAAMK,cAAa,GAAI,MAAMD,KAAK,CAACH,SAAS,CAAC;QAC7C,MAAMK,gBAAe,GAAI,MAAMF,KAAK,CAACF,WAAW,CAAC;QAEjD,IAAIC,eAAe,CAACI,EAAC,IAAKF,cAAc,CAACE,EAAC,IAAKD,gBAAgB,CAACC,EAAE,EAAE;UAClE,MAAMd,WAAU,GAAI,MAAMU,eAAe,CAACK,IAAI,CAAC,CAAC;UAChD,MAAMC,UAAS,GAAI,MAAMJ,cAAc,CAACG,IAAI,CAAC,CAAC;UAC9C,MAAME,YAAW,GAAI,MAAMJ,gBAAgB,CAACE,IAAI,CAAC,CAAC;UAElD,IAAI,CAACf,WAAU,GAAIA,WAAW;UAC9B,IAAI,CAACC,WAAU,GAAIe,UAAU,CAACf,WAAW;UACzC,IAAI,CAACC,aAAY,GAAIe,YAAY,CAACf,aAAa;UAC/C,IAAI,CAACC,cAAa,GAAI,IAAI,CAACH,WAAW,CAACkB,cAAa,GAAI,IAAI,CAACjB,WAAU,GAAI,IAAI,CAACC,aAAa;QAC/F;MACF,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}