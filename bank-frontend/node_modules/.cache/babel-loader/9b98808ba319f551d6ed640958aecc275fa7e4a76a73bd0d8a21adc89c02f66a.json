{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watchEffect } from 'vue';\nimport { LineChart } from 'vue-chart-3';\nimport { Chart, registerables } from 'chart.js';\nimport axios from 'axios';\nChart.register(...registerables);\nexport default {\n  components: {\n    LineChart\n  },\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [{\n        label: 'Total Dépenses',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        borderColor: 'rgb(255, 99, 132)',\n        fill: false,\n        data: []\n      }, {\n        label: 'Solde',\n        // Updated label for total revenue\n        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n        borderColor: 'rgb(54, 162, 235)',\n        fill: false,\n        data: []\n      }, {\n        label: 'Total Revenus',\n        // Updated label for account balance\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        borderColor: 'rgb(75, 192, 192)',\n        fill: false,\n        data: []\n      }]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    });\n    async function fetchAccountDetailsAndTransactions() {\n      try {\n        const accountId = props.accountId;\n        const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        const accountDetails = accountResponse.data;\n        const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        const transactions = transactionsResponse.data;\n        updateChartData(accountDetails, transactions);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données', error);\n      }\n    }\n    watchEffect(() => {\n      if (props.accountId) {\n        fetchAccountDetailsAndTransactions();\n      }\n    });\n    function updateChartData(accountDetails, transactions) {\n      // Trier les transactions par date.\n      const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Réinitialiser les étiquettes et les données pour le graphique.\n      chartData.value.labels = [];\n      chartData.value.datasets[0].data = []; // Total Dépenses\n      chartData.value.datasets[1].data = []; // Solde\n      chartData.value.datasets[2].data = []; // Total Revenus\n\n      let totalExpenses = 0;\n      let totalRevenues = 0;\n      let balance = accountDetails.initialBalance; // Utiliser le solde initial fourni par l'API.\n\n      // Ajouter le solde initial comme premier point de données.\n      chartData.value.datasets[1].data.push(balance); // Assurez-vous que c'est la bonne position pour le solde initial\n\n      sortedTransactions.forEach((transaction, index) => {\n        let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n\n        // Pour la première transaction, nous devons également ajouter la première étiquette\n        if (index === 0 && !chartData.value.labels.includes(transactionDate)) {\n          chartData.value.labels.push(transactionDate);\n        }\n        if (transaction.category.toLowerCase() === 'dépense') {\n          totalExpenses += Math.abs(transaction.amount);\n          balance -= transaction.amount;\n        } else if (transaction.category.toLowerCase() === 'revenu') {\n          totalRevenues += transaction.amount;\n          balance += transaction.amount;\n        }\n\n        // Ajouter les nouvelles valeurs calculées aux datasets.\n        chartData.value.datasets[0].data.push(totalExpenses);\n        chartData.value.datasets[2].data.push(totalRevenues);\n\n        // Ajouter la date de la transaction si elle n'est pas déjà présente.\n        if (!chartData.value.labels.includes(transactionDate)) {\n          chartData.value.labels.push(transactionDate);\n        }\n        // Ajouter le solde mis à jour après chaque transaction.\n        chartData.value.datasets[1].data.push(balance);\n      });\n    }\n    return {\n      chartData,\n      chartOptions\n    };\n  }\n};","map":{"version":3,"names":["ref","watchEffect","LineChart","Chart","registerables","axios","register","components","props","accountId","type","Number","required","setup","chartData","labels","datasets","label","backgroundColor","borderColor","fill","data","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","fetchAccountDetailsAndTransactions","accountResponse","get","accountDetails","transactionsResponse","transactions","updateChartData","error","console","sortedTransactions","sort","a","b","Date","date","value","totalExpenses","totalRevenues","balance","initialBalance","push","forEach","transaction","index","transactionDate","toLocaleDateString","includes","category","toLowerCase","Math","abs","amount"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, watchEffect } from 'vue';\n  import { LineChart } from 'vue-chart-3';\n  import { Chart, registerables } from 'chart.js';\n  import axios from 'axios';\n  \n  Chart.register(...registerables);\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    props: {\n      accountId: {\n        type: Number,\n        required: true,\n      },\n    },\n    setup(props) {\n      const chartData = ref({\n        labels: [],\n        datasets: [\n          {\n            label: 'Total Dépenses',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            borderColor: 'rgb(255, 99, 132)',\n            fill: false,\n            data: [],\n          },\n          {\n            label: 'Solde', // Updated label for total revenue\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\n            borderColor: 'rgb(54, 162, 235)',\n            fill: false,\n            data: [],\n          },\n          {\n            label: 'Total Revenus', // Updated label for account balance\n            backgroundColor: 'rgba(75, 192, 192, 0.5)',\n            borderColor: 'rgb(75, 192, 192)',\n            fill: false,\n            data: [],\n          },\n        ],\n      });\n      const chartOptions = ref({\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: false,\n          },\n        },\n      });\n  \n      async function fetchAccountDetailsAndTransactions() {\n        try {\n          const accountId = props.accountId;\n  \n          const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n          const accountDetails = accountResponse.data;\n  \n          const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n          const transactions = transactionsResponse.data;\n  \n          updateChartData(accountDetails, transactions);\n        } catch (error) {\n          console.error('Erreur lors de la récupération des données', error);\n        }\n      }\n  \n      watchEffect(() => {\n        if (props.accountId) {\n          fetchAccountDetailsAndTransactions();\n        }\n      });\n  \n      function updateChartData(accountDetails, transactions) {\n  // Trier les transactions par date.\n  const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Réinitialiser les étiquettes et les données pour le graphique.\n  chartData.value.labels = [];\n  chartData.value.datasets[0].data = []; // Total Dépenses\n  chartData.value.datasets[1].data = []; // Solde\n  chartData.value.datasets[2].data = []; // Total Revenus\n\n  let totalExpenses = 0;\n  let totalRevenues = 0;\n  let balance = accountDetails.initialBalance; // Utiliser le solde initial fourni par l'API.\n\n  // Ajouter le solde initial comme premier point de données.\n  chartData.value.datasets[1].data.push(balance); // Assurez-vous que c'est la bonne position pour le solde initial\n\n  sortedTransactions.forEach((transaction, index) => {\n    let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n\n    // Pour la première transaction, nous devons également ajouter la première étiquette\n    if (index === 0 && !chartData.value.labels.includes(transactionDate)) {\n      chartData.value.labels.push(transactionDate);\n    }\n\n    if (transaction.category.toLowerCase() === 'dépense') {\n      totalExpenses += Math.abs(transaction.amount);\n      balance -= transaction.amount;\n    } else if (transaction.category.toLowerCase() === 'revenu') {\n      totalRevenues += transaction.amount;\n      balance += transaction.amount;\n    }\n\n    // Ajouter les nouvelles valeurs calculées aux datasets.\n    chartData.value.datasets[0].data.push(totalExpenses);\n    chartData.value.datasets[2].data.push(totalRevenues);\n\n    // Ajouter la date de la transaction si elle n'est pas déjà présente.\n    if (!chartData.value.labels.includes(transactionDate)) {\n      chartData.value.labels.push(transactionDate);\n    }\n    // Ajouter le solde mis à jour après chaque transaction.\n    chartData.value.datasets[1].data.push(balance);\n  });\n}\n\n  \n      return {\n        chartData,\n        chartOptions,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your styles here */\n  </style>\n  "],"mappings":";AAOE,SAASA,GAAG,EAAEC,WAAU,QAAS,KAAK;AACtC,SAASC,SAAQ,QAAS,aAAa;AACvC,SAASC,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/C,OAAOC,KAAI,MAAO,OAAO;AAEzBF,KAAK,CAACG,QAAQ,CAAC,GAAGF,aAAa,CAAC;AAEhC,eAAe;EACbG,UAAU,EAAE;IACVL;EACF,CAAC;EACDM,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,SAAQ,GAAId,GAAG,CAAC;MACpBe,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,gBAAgB;QACvBC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,mBAAmB;QAChCC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC,EACD;QACEJ,KAAK,EAAE,OAAO;QAAE;QAChBC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,mBAAmB;QAChCC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC,EACD;QACEJ,KAAK,EAAE,eAAe;QAAE;QACxBC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,mBAAmB;QAChCC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;IACF,MAAMC,YAAW,GAAItB,GAAG,CAAC;MACvBuB,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;QACf;MACF;IACF,CAAC,CAAC;IAEF,eAAeC,kCAAkCA,CAAA,EAAG;MAClD,IAAI;QACF,MAAMnB,SAAQ,GAAID,KAAK,CAACC,SAAS;QAEjC,MAAMoB,eAAc,GAAI,MAAMxB,KAAK,CAACyB,GAAG,CAAE,kCAAiCrB,SAAU,EAAC,CAAC;QACtF,MAAMsB,cAAa,GAAIF,eAAe,CAACR,IAAI;QAE3C,MAAMW,oBAAmB,GAAI,MAAM3B,KAAK,CAACyB,GAAG,CAAE,kCAAiCrB,SAAU,eAAc,CAAC;QACxG,MAAMwB,YAAW,GAAID,oBAAoB,CAACX,IAAI;QAE9Ca,eAAe,CAACH,cAAc,EAAEE,YAAY,CAAC;MAC/C,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;IACF;IAEAlC,WAAW,CAAC,MAAM;MAChB,IAAIO,KAAK,CAACC,SAAS,EAAE;QACnBmB,kCAAkC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,SAASM,eAAeA,CAACH,cAAc,EAAEE,YAAY,EAAE;MAC3D;MACA,MAAMI,kBAAiB,GAAIJ,YAAY,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,IAAI,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;;MAE3F;MACA5B,SAAS,CAAC6B,KAAK,CAAC5B,MAAK,GAAI,EAAE;MAC3BD,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAG,GAAI,EAAE,EAAE;MACvCP,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAG,GAAI,EAAE,EAAE;MACvCP,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAG,GAAI,EAAE,EAAE;;MAEvC,IAAIuB,aAAY,GAAI,CAAC;MACrB,IAAIC,aAAY,GAAI,CAAC;MACrB,IAAIC,OAAM,GAAIf,cAAc,CAACgB,cAAc,EAAE;;MAE7C;MACAjC,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC2B,IAAI,CAACF,OAAO,CAAC,EAAE;;MAEhDT,kBAAkB,CAACY,OAAO,CAAC,CAACC,WAAW,EAAEC,KAAK,KAAK;QACjD,IAAIC,eAAc,GAAI,IAAIX,IAAI,CAACS,WAAW,CAACR,IAAI,CAAC,CAACW,kBAAkB,CAAC,OAAO,CAAC;;QAE5E;QACA,IAAIF,KAAI,KAAM,KAAK,CAACrC,SAAS,CAAC6B,KAAK,CAAC5B,MAAM,CAACuC,QAAQ,CAACF,eAAe,CAAC,EAAE;UACpEtC,SAAS,CAAC6B,KAAK,CAAC5B,MAAM,CAACiC,IAAI,CAACI,eAAe,CAAC;QAC9C;QAEA,IAAIF,WAAW,CAACK,QAAQ,CAACC,WAAW,CAAC,MAAM,SAAS,EAAE;UACpDZ,aAAY,IAAKa,IAAI,CAACC,GAAG,CAACR,WAAW,CAACS,MAAM,CAAC;UAC7Cb,OAAM,IAAKI,WAAW,CAACS,MAAM;QAC/B,OAAO,IAAIT,WAAW,CAACK,QAAQ,CAACC,WAAW,CAAC,MAAM,QAAQ,EAAE;UAC1DX,aAAY,IAAKK,WAAW,CAACS,MAAM;UACnCb,OAAM,IAAKI,WAAW,CAACS,MAAM;QAC/B;;QAEA;QACA7C,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC2B,IAAI,CAACJ,aAAa,CAAC;QACpD9B,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC2B,IAAI,CAACH,aAAa,CAAC;;QAEpD;QACA,IAAI,CAAC/B,SAAS,CAAC6B,KAAK,CAAC5B,MAAM,CAACuC,QAAQ,CAACF,eAAe,CAAC,EAAE;UACrDtC,SAAS,CAAC6B,KAAK,CAAC5B,MAAM,CAACiC,IAAI,CAACI,eAAe,CAAC;QAC9C;QACA;QACAtC,SAAS,CAAC6B,KAAK,CAAC3B,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC2B,IAAI,CAACF,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ;IAGM,OAAO;MACLhC,SAAS;MACTQ;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}