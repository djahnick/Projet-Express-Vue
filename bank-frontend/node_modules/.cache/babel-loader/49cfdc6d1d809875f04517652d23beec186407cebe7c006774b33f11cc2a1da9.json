{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e1e7ce2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container mx-auto p-8\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AccountInfo = _resolveComponent(\"AccountInfo\");\n  const _component_TransactionForm = _resolveComponent(\"TransactionForm\");\n  const _component_TransactionList = _resolveComponent(\"TransactionList\");\n  const _component_AccountChart = _resolveComponent(\"AccountChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AccountInfo, {\n    accountDetails: $data.accountDetails\n  }, null, 8 /* PROPS */, [\"accountDetails\"]), _createCommentVNode(\" Utilisez le composant AccountInfo ici \"), _createVNode(_component_TransactionForm, {\n    accountId: $data.accountDetails.id,\n    onTransactionCreated: $options.updateTransactions\n  }, null, 8 /* PROPS */, [\"accountId\", \"onTransactionCreated\"]), _createVNode(_component_TransactionList, {\n    ref: \"transactionList\",\n    accountId: $data.accountDetails.id\n  }, null, 8 /* PROPS */, [\"accountId\"]), _createVNode(_component_AccountChart, {\n    accountId: $data.accountDetails.id\n  }, null, 8 /* PROPS */, [\"accountId\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_AccountInfo","accountDetails","$data","_createCommentVNode","_component_TransactionForm","accountId","id","onTransactionCreated","$options","updateTransactions","_component_TransactionList","ref","_component_AccountChart"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["\n<template>\n  <div class=\"container mx-auto p-8\">\n    <AccountInfo :accountDetails=\"accountDetails\" /> <!-- Utilisez le composant AccountInfo ici -->\n\n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n      ref=\"transactionList\" \n      :accountId=\"accountDetails.id\"\n    />\n    <AccountChart :accountId=\"accountDetails.id\" />\n\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue'; // Assurez-vous que le chemin d'importation est correct\nimport AccountInfo from '../components/AccountInfo.vue'; // Importez le composant AccountInfo\n\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart,\n    AccountInfo\n    \n  },\n  data() {\n    return {\n      // Set initial values to avoid errors before the actual data is fetched\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR', // Replace 'EUR' with your default or expected currency\n        accountName: '',\n        initialBalance: 0, // Ajoutez cette ligne\n\n        id: null\n      }\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n    // Vérifiez si accountDetails contient les propriétés nécessaires pour éviter des erreurs\n    if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: this.accountDetails.currency\n      }).format(this.accountDetails.initialBalance);\n    }\n    // Retournez un espace réservé ou une chaîne vide si les données ne sont pas encore disponibles\n    return 'Chargement...';\n  },\n    formattedBalance() {\n      // Check if accountDetails has the necessary properties to avoid errors\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      // Return a placeholder or empty string if the data is not yet available\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n        // Handle error, show user-friendly message if needed\n      }\n    },\n    async updateTransactions() {\n      // Refresh account details and transaction list\n      await this.fetchAccountDetails();\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n\n\n"],"mappings":";;;EAEOA,KAAK,EAAC;AAAuB;;;;;;uBAAlCC,mBAAA,CAeM,OAfNC,UAeM,GAdJC,YAAA,CAAgDC,sBAAA;IAAlCC,cAAc,EAAEC,KAAA,CAAAD;EAAc,6CAAKE,mBAAA,2CAA8C,EAE/FJ,YAAA,CAGEK,0BAAA;IAFCC,SAAS,EAAEH,KAAA,CAAAD,cAAc,CAACK,EAAE;IAC5BC,oBAAmB,EAAEC,QAAA,CAAAC;kEAGxBV,YAAA,CAGEW,0BAAA;IAFAC,GAAG,EAAC,iBAAiB;IACpBN,SAAS,EAAEH,KAAA,CAAAD,cAAc,CAACK;0CAE7BP,YAAA,CAA+Ca,uBAAA;IAAhCP,SAAS,EAAEH,KAAA,CAAAD,cAAc,CAACK"},"metadata":{},"sourceType":"module","externalDependencies":[]}