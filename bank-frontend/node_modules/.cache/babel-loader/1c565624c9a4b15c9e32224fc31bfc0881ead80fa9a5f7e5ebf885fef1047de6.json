{"ast":null,"code":"import axios from 'axios';\nimport { ref, onMounted } from 'vue';\nimport { BarChart } from 'vue-chart-3';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    BarChart // Ajout du composant BarChart\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const accountDetails = ref({\n      balance: 0,\n      currency: 'EUR',\n      accountName: '',\n      id: null\n    });\n    const chartData = ref({\n      // Les données initiales pour le graphique seront ajoutées ici après la récupération des données\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    });\n    async function fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        accountDetails.value = response.data;\n\n        // Ici, vous devez également calculer les données pour le graphique\n        // en utilisant les transactions du compte pour définir les données du chartData\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    }\n    onMounted(fetchAccountDetails);\n    return {\n      accountDetails,\n      fetchAccountDetails,\n      chartData,\n      chartOptions\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","BarChart","TransactionForm","TransactionList","name","components","setup","props","emit","accountDetails","balance","currency","accountName","id","chartData","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","fetchAccountDetails","accountId","$route","params","response","get","value","data","error","console"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n\n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n    </div>\n\n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n      ref=\"transactionList\" \n      :accountId=\"accountDetails.id\"\n    />\n\n    <!-- Section graphique -->\n    <div class=\"mt-8\">\n      <BarChart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, onMounted } from 'vue';\nimport { BarChart } from 'vue-chart-3';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    BarChart // Ajout du composant BarChart\n  },\n  setup(props, { emit }) {\n    const accountDetails = ref({\n      balance: 0,\n      currency: 'EUR',\n      accountName: '',\n      id: null\n    });\n\n    const chartData = ref({\n      // Les données initiales pour le graphique seront ajoutées ici après la récupération des données\n    });\n\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    });\n\n    async function fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        accountDetails.value = response.data;\n\n        // Ici, vous devez également calculer les données pour le graphique\n        // en utilisant les transactions du compte pour définir les données du chartData\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    }\n\n    onMounted(fetchAccountDetails);\n\n    return {\n      accountDetails,\n      fetchAccountDetails,\n      chartData,\n      chartOptions\n    };\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AA6BA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,QAAO,QAAS,aAAa;AACtC,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAE/D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVH,eAAe;IACfC,eAAe;IACfF,QAAO,CAAE;EACX,CAAC;;EACDK,KAAKA,CAACC,KAAK,EAAE;IAAEC;EAAK,CAAC,EAAE;IACrB,MAAMC,cAAa,GAAIV,GAAG,CAAC;MACzBW,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,EAAE;MACfC,EAAE,EAAE;IACN,CAAC,CAAC;IAEF,MAAMC,SAAQ,GAAIf,GAAG,CAAC;MACpB;IAAA,CACD,CAAC;IAEF,MAAMgB,YAAW,GAAIhB,GAAG,CAAC;MACvBiB,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;QACf;MACF;IACF,CAAC,CAAC;IAEF,eAAeC,mBAAmBA,CAAA,EAAG;MACnC,IAAI;QACF,MAAMC,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACX,EAAE;QACvC,MAAMY,QAAO,GAAI,MAAM3B,KAAK,CAAC4B,GAAG,CAAE,kCAAiCJ,SAAU,EAAC,CAAC;QAC/Eb,cAAc,CAACkB,KAAI,GAAIF,QAAQ,CAACG,IAAI;;QAEpC;QACA;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;IACF;IAEA7B,SAAS,CAACqB,mBAAmB,CAAC;IAE9B,OAAO;MACLZ,cAAc;MACdY,mBAAmB;MACnBP,SAAS;MACTC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}