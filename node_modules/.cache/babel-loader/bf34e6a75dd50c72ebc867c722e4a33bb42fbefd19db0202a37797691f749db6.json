{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        date: '',\n        category: '',\n        amount: 0,\n        description: ''\n      },\n      transactions: [] // Ajout de la liste des transactions\n    };\n  },\n\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTransactions(); // Récupérer les transactions dès le chargement\n  },\n\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      // ...logique de création de transaction...\n    },\n    async fetchTransactions() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","accountDetails","transaction","date","category","amount","description","transactions","created","fetchAccountDetails","fetchTransactions","methods","accountId","$route","params","id","response","get","error","console","createTransaction"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Détails du Compte</h2>\n    <p>Nom du Compte: {{ accountDetails.accountName }}</p>\n    <p>Solde: {{ accountDetails.balance }} {{ accountDetails.currency }}</p>\n\n    <!-- Formulaire de Création de Transaction -->\n    <h3>Créer une Transaction</h3>\n    <form @submit.prevent=\"createTransaction\">\n      <!-- ...champs du formulaire de transaction... -->\n    </form>\n\n    <!-- Liste des Transactions -->\n    <h3>Transactions</h3>\n    <ul>\n      <li v-for=\"transaction in transactions\" :key=\"transaction.id\">\n        {{ transaction.date }} - {{ transaction.category }} - {{ transaction.amount }} {{ accountDetails.currency }} - {{ transaction.description }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        date: '',\n        category: '',\n        amount: 0,\n        description: ''\n      },\n      transactions: []  // Ajout de la liste des transactions\n    };\n  },\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTransactions();  // Récupérer les transactions dès le chargement\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      // ...logique de création de transaction...\n    },\n    async fetchTransactions() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Ajoutez du style si nécessaire */\n</style>\n"],"mappings":"AAuBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,CAAC,CAAC;MAClBC,WAAW,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,CAAC;QACTC,WAAW,EAAE;MACf,CAAC;MACDC,YAAY,EAAE,EAAC,CAAG;IACpB,CAAC;EACH,CAAC;;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAChC,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAAC,EAAG;EACnC,CAAC;;EACDC,OAAO,EAAE;IACP,MAAMF,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAMG,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAE,kCAAiCL,SAAU,EAAC,CAAC;QAC/E,IAAI,CAACX,cAAa,GAAIe,QAAQ,CAAChB,IAAI;MACrC,EAAE,OAAOkB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;IACF,CAAC;IACD,MAAME,iBAAiBA,CAAA,EAAG;MACxB;IAAA,CACD;IACD,MAAMV,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAE,kCAAiCL,SAAU,eAAc,CAAC;QAC5F,IAAI,CAACL,YAAW,GAAIS,QAAQ,CAAChB,IAAI;MACnC,EAAE,OAAOkB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}