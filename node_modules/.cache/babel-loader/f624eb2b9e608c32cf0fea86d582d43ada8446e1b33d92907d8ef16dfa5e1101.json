{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watchEffect } from 'vue';\nimport { LineChart } from 'vue-chart-3';\nimport { Chart, registerables } from 'chart.js';\nimport axios from 'axios';\nChart.register(...registerables);\nexport default {\n  components: {\n    LineChart\n  },\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [{\n        label: 'Solde',\n        // Updated label for total revenue\n        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n        borderColor: 'rgb(54, 162, 235)',\n        fill: false,\n        data: []\n      }]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    });\n    async function fetchAccountDetailsAndTransactions() {\n      try {\n        const accountId = props.accountId;\n        const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        const accountDetails = accountResponse.data;\n        const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        const transactions = transactionsResponse.data;\n        updateChartData(accountDetails, transactions);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données', error);\n      }\n    }\n    watchEffect(() => {\n      if (props.accountId) {\n        fetchAccountDetailsAndTransactions();\n      }\n    });\n    function updateChartData(accountDetails, transactions) {\n      chartData.value.labels = [];\n      chartData.value.datasets[0].data = []; // Solde\n\n      let balance = accountDetails.balance;\n      transactions.forEach(transaction => {\n        let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n        chartData.value.labels.push(transactionDate);\n        if (transaction.category === 'Dépense') {\n          balance -= transaction.amount;\n        } else {\n          balance += transaction.amount;\n        }\n        chartData.value.datasets[0].data.push(balance);\n      });\n    }\n    return {\n      chartData,\n      chartOptions\n    };\n  }\n};","map":{"version":3,"names":["ref","watchEffect","LineChart","Chart","registerables","axios","register","components","props","accountId","type","Number","required","setup","chartData","labels","datasets","label","backgroundColor","borderColor","fill","data","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","fetchAccountDetailsAndTransactions","accountResponse","get","accountDetails","transactionsResponse","transactions","updateChartData","error","console","value","balance","forEach","transaction","transactionDate","Date","date","toLocaleDateString","push","category","amount"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, watchEffect } from 'vue';\n  import { LineChart } from 'vue-chart-3';\n  import { Chart, registerables } from 'chart.js';\n  import axios from 'axios';\n  \n  Chart.register(...registerables);\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    props: {\n      accountId: {\n        type: Number,\n        required: true,\n      },\n    },\n    setup(props) {\n      const chartData = ref({\n        labels: [],\n        datasets: [\n          {\n            label: 'Solde', // Updated label for total revenue\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\n            borderColor: 'rgb(54, 162, 235)',\n            fill: false,\n            data: [],\n          },\n        ],\n      });\n      const chartOptions = ref({\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: false,\n          },\n        },\n      });\n  \n      async function fetchAccountDetailsAndTransactions() {\n        try {\n          const accountId = props.accountId;\n  \n          const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n          const accountDetails = accountResponse.data;\n  \n          const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n          const transactions = transactionsResponse.data;\n  \n          updateChartData(accountDetails, transactions);\n        } catch (error) {\n          console.error('Erreur lors de la récupération des données', error);\n        }\n      }\n  \n      watchEffect(() => {\n        if (props.accountId) {\n          fetchAccountDetailsAndTransactions();\n        }\n      });\n  \n      function updateChartData(accountDetails, transactions) {\n        chartData.value.labels = [];\n        chartData.value.datasets[0].data = []; // Solde\n  \n        let balance = accountDetails.balance;\n  \n        transactions.forEach((transaction) => {\n          let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n          chartData.value.labels.push(transactionDate);\n  \n          if (transaction.category === 'Dépense') {\n            balance -= transaction.amount;\n          } else {\n            balance += transaction.amount;\n          }\n  \n          chartData.value.datasets[0].data.push(balance);\n        });\n      }\n  \n      return {\n        chartData,\n        chartOptions,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your styles here */\n  </style>\n  "],"mappings":";AAOE,SAASA,GAAG,EAAEC,WAAU,QAAS,KAAK;AACtC,SAASC,SAAQ,QAAS,aAAa;AACvC,SAASC,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/C,OAAOC,KAAI,MAAO,OAAO;AAEzBF,KAAK,CAACG,QAAQ,CAAC,GAAGF,aAAa,CAAC;AAEhC,eAAe;EACbG,UAAU,EAAE;IACVL;EACF,CAAC;EACDM,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,SAAQ,GAAId,GAAG,CAAC;MACpBe,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,OAAO;QAAE;QAChBC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,mBAAmB;QAChCC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;IACF,MAAMC,YAAW,GAAItB,GAAG,CAAC;MACvBuB,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;QACf;MACF;IACF,CAAC,CAAC;IAEF,eAAeC,kCAAkCA,CAAA,EAAG;MAClD,IAAI;QACF,MAAMnB,SAAQ,GAAID,KAAK,CAACC,SAAS;QAEjC,MAAMoB,eAAc,GAAI,MAAMxB,KAAK,CAACyB,GAAG,CAAE,kCAAiCrB,SAAU,EAAC,CAAC;QACtF,MAAMsB,cAAa,GAAIF,eAAe,CAACR,IAAI;QAE3C,MAAMW,oBAAmB,GAAI,MAAM3B,KAAK,CAACyB,GAAG,CAAE,kCAAiCrB,SAAU,eAAc,CAAC;QACxG,MAAMwB,YAAW,GAAID,oBAAoB,CAACX,IAAI;QAE9Ca,eAAe,CAACH,cAAc,EAAEE,YAAY,CAAC;MAC/C,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;IACF;IAEAlC,WAAW,CAAC,MAAM;MAChB,IAAIO,KAAK,CAACC,SAAS,EAAE;QACnBmB,kCAAkC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,SAASM,eAAeA,CAACH,cAAc,EAAEE,YAAY,EAAE;MACrDnB,SAAS,CAACuB,KAAK,CAACtB,MAAK,GAAI,EAAE;MAC3BD,SAAS,CAACuB,KAAK,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAG,GAAI,EAAE,EAAE;;MAEvC,IAAIiB,OAAM,GAAIP,cAAc,CAACO,OAAO;MAEpCL,YAAY,CAACM,OAAO,CAAEC,WAAW,IAAK;QACpC,IAAIC,eAAc,GAAI,IAAIC,IAAI,CAACF,WAAW,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;QAC5E9B,SAAS,CAACuB,KAAK,CAACtB,MAAM,CAAC8B,IAAI,CAACJ,eAAe,CAAC;QAE5C,IAAID,WAAW,CAACM,QAAO,KAAM,SAAS,EAAE;UACtCR,OAAM,IAAKE,WAAW,CAACO,MAAM;QAC/B,OAAO;UACLT,OAAM,IAAKE,WAAW,CAACO,MAAM;QAC/B;QAEAjC,SAAS,CAACuB,KAAK,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAACwB,IAAI,CAACP,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ;IAEA,OAAO;MACLxB,SAAS;MACTQ;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}