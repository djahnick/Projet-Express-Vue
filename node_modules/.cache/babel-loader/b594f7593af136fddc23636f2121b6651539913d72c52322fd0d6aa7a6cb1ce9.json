{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: [],\n      isEditing: false,\n      transactionToEdit: null,\n      accountDetails: null\n    };\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n        this.fetchAccountDetails();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: 'EUR'\n      }).format(amount);\n    },\n    async fetchAccountDetails() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async deleteTransaction(accountId, transactionId) {\n      try {\n        await axios.delete(`http://localhost:3000/accounts/${accountId}/transactions/${transactionId}`);\n        // Fetch updated account details after deleting the transaction\n        await this.fetchAccountDetails();\n        // Update the account's current balance using the fetched details\n        this.accountDetails.balance -= this.transactions.find(t => t.id === transactionId).amount;\n        // Filter out the deleted transaction from the transactions array\n        this.transactions = this.transactions.filter(t => t.id !== transactionId);\n      } catch (error) {\n        console.error('Erreur lors de la suppression de la transaction', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","accountId","type","Number","required","data","transactions","isEditing","transactionToEdit","accountDetails","watch","immediate","handler","fetchTransactions","fetchAccountDetails","methods","response","get","error","console","formatDate","date","Date","toLocaleDateString","formatAmount","amount","Intl","NumberFormat","style","currency","format","deleteTransaction","transactionId","delete","balance","find","t","id","filter"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<template>\n\n  <div v-if=\"isEditing\" class=\"fixed inset-0 bg-black bg-opacity-50 h-full w-full flex justify-center items-center\">\n      <div class=\"bg-white p-4 rounded-lg\">\n        <form @submit.prevent=\"updateTransaction\">\n          <!-- Formulaire pour modifier la transaction -->\n          <div>\n            <label for=\"edit-description\" class=\"block text-sm font-medium text-gray-700\">Description</label>\n            <input type=\"text\" id=\"edit-description\" v-model=\"transactionToEdit.description\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4\">\n            <label for=\"edit-amount\" class=\"block text-sm font-medium text-gray-700\">Montant</label>\n            <input type=\"number\" id=\"edit-amount\" v-model=\"transactionToEdit.amount\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4\">\n            <label for=\"edit-date\" class=\"block text-sm font-medium text-gray-700\">Date</label>\n            <input type=\"date\" id=\"edit-date\" v-model=\"transactionToEdit.date\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4 flex justify-end space-x-2\">\n            <button type=\"button\" @click=\"isEditing = false\" class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">\n              Annuler\n            </button>\n            <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n              Sauvegarder\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"container mx-auto p-4\">\n      <h2 class=\"text-2xl font-semibold mb-4\">Transactions</h2>\n      <ul v-if=\"transactions.length\" class=\"bg-white shadow-md rounded-lg overflow-hidden\">\n        <li v-for=\"transaction in transactions\" :key=\"transaction.id\" class=\"px-6 py-4 border-b hover:bg-gray-100\">\n          <div class=\"flex justify-between items-center\">\n            <!-- Section pour Revenus -->\n            <div v-if=\"transaction.category === 'revenu'\" class=\"flex items-center space-x-4\">\n              <span class=\"p-2 inline-flex items-center justify-center text-green-500\">\n                <i class=\"fas fa-arrow-down\"></i> <!-- Icone de revenu -->\n              </span>\n              <div class=\"flex-1\">\n                <p class=\"text-sm font-semibold text-gray-600\">Revenu</p>\n                <p class=\"text-gray-800\">{{ transaction.description }}</p>\n                <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n              </div>\n              <span class=\"text-green-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n             \n              <button @click=\"deleteTransaction(accountId, transaction.id)\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">\n  Supprimer\n</button>\n\n            </div>\n            \n            <!-- Placeholder quand il n'y a pas de revenu -->\n            <div v-else class=\"flex-1\"></div>\n            \n            <!-- Section pour Dépenses -->\n            <div v-if=\"transaction.category === 'dépense'\" class=\"flex items-center justify-end space-x-4\">\n              <span class=\"text-red-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n              <div class=\"flex-1 text-right\">\n                <p class=\"text-sm font-semibold text-gray-600\">Dépense</p>\n                <p class=\"text-gray-800\">{{ transaction.description }}</p>\n                <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n              </div>\n              <span class=\"p-2 inline-flex items-center justify-center text-red-500\">\n                <i class=\"fas fa-arrow-up\"></i> <!-- Icone de dépense -->\n              </span>\n              \n  \n              <button @click=\"deleteTransaction(accountId, transaction.id)\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">\n  Supprimer\n</button>\n\n            </div>\n            \n            <!-- Placeholder quand il n'y a pas de dépense -->\n            <div v-else class=\"text-red-500\"></div>\n          </div>\n        </li>\n      </ul>\n      <div v-else class=\"text-center py-4\">\n        <p>Aucune transaction disponible.</p>\n      </div>\n      \n    </div>\n  </template>\n  \n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'TransactionList',\n    props: {\n      accountId: {\n        type: Number,\n        required: true\n      }\n    },\n    data() {\n      return {\n        transactions: [],\n        isEditing: false,\n        transactionToEdit: null,\n        accountDetails: null\n      };\n    },\n    watch: {\n      accountId: {\n        immediate: true,\n        handler() {\n          this.fetchTransactions();\n          this.fetchAccountDetails();\n        }\n      }\n    },\n    methods: {\n      async fetchTransactions() {\n        try {\n          const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n          this.transactions = response.data;\n        } catch (error) {\n          console.error('Erreur lors de la récupération des transactions', error);\n        }\n      },\n      formatDate(date) {\n        return new Date(date).toLocaleDateString('fr-FR');\n      },\n      formatAmount(amount) {\n        return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n      },\n      async fetchAccountDetails() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n\n    async deleteTransaction(accountId, transactionId) {\n      try {\n        await axios.delete(`http://localhost:3000/accounts/${accountId}/transactions/${transactionId}`);\n        // Fetch updated account details after deleting the transaction\n        await this.fetchAccountDetails();\n        // Update the account's current balance using the fetched details\n        this.accountDetails.balance -= this.transactions.find(t => t.id === transactionId).amount;\n        // Filter out the deleted transaction from the transactions array\n        this.transactions = this.transactions.filter(t => t.id !== transactionId);\n      } catch (error) {\n        console.error('Erreur lors de la suppression de la transaction', error);\n      }\n    }\n\n      \n    }\n  \n  };\n  </script>\n  \n  <style scoped>\n  /* Tailwind classes are handling all the styling needs. If you have custom styles, you can add them here */\n  \n  </style>"],"mappings":"AAwFE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,KAAK;MAChBC,iBAAiB,EAAE,IAAI;MACvBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLT,SAAS,EAAE;MACTU,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC5B;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAE,kCAAiC,IAAI,CAAChB,SAAU,eAAc,CAAC;QACjG,IAAI,CAACK,YAAW,GAAIU,QAAQ,CAACX,IAAI;MACnC,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF,CAAC;IACDE,UAAUA,CAACC,IAAI,EAAE;MACf,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;IACnD,CAAC;IACDC,YAAYA,CAACC,MAAM,EAAE;MACnB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;IAC9F,CAAC;IACD,MAAMX,mBAAmBA,CAAA,EAAG;MAC5B,IAAI;QACF,MAAME,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAE,kCAAiC,IAAI,CAAChB,SAAU,EAAC,CAAC;QACpF,IAAI,CAACQ,cAAa,GAAIO,QAAQ,CAACX,IAAI;MACrC,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;IACF,CAAC;IAED,MAAMa,iBAAiBA,CAAC9B,SAAS,EAAE+B,aAAa,EAAE;MAChD,IAAI;QACF,MAAMlC,KAAK,CAACmC,MAAM,CAAE,kCAAiChC,SAAU,iBAAgB+B,aAAc,EAAC,CAAC;QAC/F;QACA,MAAM,IAAI,CAAClB,mBAAmB,CAAC,CAAC;QAChC;QACA,IAAI,CAACL,cAAc,CAACyB,OAAM,IAAK,IAAI,CAAC5B,YAAY,CAAC6B,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAML,aAAa,CAAC,CAACP,MAAM;QACzF;QACA,IAAI,CAACnB,YAAW,GAAI,IAAI,CAACA,YAAY,CAACgC,MAAM,CAACF,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAML,aAAa,CAAC;MAC3E,EAAE,OAAOd,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF;EAGA;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}