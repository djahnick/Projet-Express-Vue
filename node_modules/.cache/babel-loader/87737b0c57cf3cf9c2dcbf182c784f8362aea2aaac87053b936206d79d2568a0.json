{"ast":null,"code":"import axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../AccountChart.vue'; // Assurez-vous que le chemin d'importation est correct\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n  },\n  data() {\n    return {\n      // Set initial values to avoid errors before the actual data is fetched\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR',\n        // Replace 'EUR' with your default or expected currency\n        accountName: '',\n        id: null\n      }\n    };\n  },\n  computed: {\n    formattedBalance() {\n      // Check if accountDetails has the necessary properties to avoid errors\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      // Return a placeholder or empty string if the data is not yet available\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n        // Handle error, show user-friendly message if needed\n      }\n    },\n\n    async updateTransactions() {\n      // Refresh account details and transaction list\n      await this.fetchAccountDetails();\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","TransactionForm","TransactionList","AccountChart","name","components","data","accountDetails","balance","currency","accountName","id","computed","formattedBalance","Intl","NumberFormat","style","format","created","fetchAccountDetails","methods","accountId","$route","params","response","get","error","console","updateTransactions","$refs","transactionList","fetchTransactions"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n    \n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n    </div>\n    \n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n      ref=\"transactionList\" \n      :accountId=\"accountDetails.id\"\n    />\n    <AccountChart :transactions=\"accountDetails.transactions\" />\n\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../AccountChart.vue'; // Assurez-vous que le chemin d'importation est correct\n\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n    \n  },\n  data() {\n    return {\n      // Set initial values to avoid errors before the actual data is fetched\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR', // Replace 'EUR' with your default or expected currency\n        accountName: '',\n        id: null\n      }\n    };\n  },\n  computed: {\n    formattedBalance() {\n      // Check if accountDetails has the necessary properties to avoid errors\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      // Return a placeholder or empty string if the data is not yet available\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n        // Handle error, show user-friendly message if needed\n      }\n    },\n    async updateTransactions() {\n      // Refresh account details and transaction list\n      await this.fetchAccountDetails();\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AA2BA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,YAAW,MAAO,qBAAqB,EAAE;;AAGhD,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVJ,eAAe;IACfC,eAAe;IACfC;EAEF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,cAAc,EAAE;QACdC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,KAAK;QAAE;QACjBC,WAAW,EAAE,EAAE;QACfC,EAAE,EAAE;MACN;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,OAAO,IAAI,CAACN,cAAc,CAACE,QAAO,KAAM,QAAO,IAAK,OAAO,IAAI,CAACF,cAAc,CAACC,OAAM,KAAM,QAAQ,EAAE;QACvG,OAAO,IAAIM,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;UACpCC,KAAK,EAAE,UAAU;UACjBP,QAAQ,EAAE,IAAI,CAACF,cAAc,CAACE;QAChC,CAAC,CAAC,CAACQ,MAAM,CAAC,IAAI,CAACV,cAAc,CAACC,OAAO,CAAC;MACxC;MACA;MACA,OAAO,eAAe;IACxB;EACF,CAAC;EACD,MAAMU,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACZ,EAAE;QACvC,MAAMa,QAAO,GAAI,MAAMxB,KAAK,CAACyB,GAAG,CAAE,kCAAiCJ,SAAU,EAAC,CAAC;QAC/E,IAAI,CAACd,cAAa,GAAIiB,QAAQ,CAAClB,IAAI;MACrC,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;QAC5E;MACF;IACF,CAAC;;IACD,MAAME,kBAAkBA,CAAA,EAAG;MACzB;MACA,MAAM,IAAI,CAACT,mBAAmB,CAAC,CAAC;MAChC,IAAI,IAAI,CAACU,KAAK,CAACC,eAAe,EAAE;QAC9B,IAAI,CAACD,KAAK,CAACC,eAAe,CAACC,iBAAiB,CAAC,CAAC;MAChD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}