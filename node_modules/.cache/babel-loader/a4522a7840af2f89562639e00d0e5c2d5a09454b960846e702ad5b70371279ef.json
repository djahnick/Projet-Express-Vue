{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: []\n    };\n  },\n  computed: {\n    expenses() {\n      return this.transactions.filter(transaction => transaction.category === 'dépense');\n    },\n    revenues() {\n      return this.transactions.filter(transaction => transaction.category === 'revenu');\n    }\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: 'EUR'\n      }).format(amount);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","accountId","type","Number","required","data","transactions","computed","expenses","filter","transaction","category","revenues","watch","immediate","handler","fetchTransactions","methods","response","get","error","console","formatDate","date","Date","toLocaleDateString","formatAmount","amount","Intl","NumberFormat","style","currency","format"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-4\">\n    <h2 class=\"text-2xl font-semibold mb-4\">Bilan des Transactions</h2>\n    \n    <div class=\"flex flex-col md:flex-row justify-between\">\n      <div class=\"flex-1 md:mr-2\">\n        <h3 class=\"text-lg font-semibold text-red-500 mb-2\">Dépenses</h3>\n        <div class=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <ul>\n            <li v-for=\"expense in expenses\" :key=\"expense.id\" class=\"px-6 py-4 border-b\">\n              <p>ID: {{ expense.id }}</p>\n              <p>Date: {{ formatDate(expense.date) }}</p>\n              <p>Catégorie: {{ expense.category }}</p>\n              <p>Montant: {{ formatAmount(expense.amount) }}</p>\n              <p>Description: {{ expense.description }}</p>\n            </li>\n          </ul>\n        </div>\n      </div>\n      \n      <div class=\"flex-1 md:ml-2 mt-4 md:mt-0\">\n        <h3 class=\"text-lg font-semibold text-green-500 mb-2\">Revenus</h3>\n        <div class=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <ul>\n            <li v-for=\"revenue in revenues\" :key=\"revenue.id\" class=\"px-6 py-4 border-b\">\n              <p>ID: {{ revenue.id }}</p>\n              <p>Date: {{ formatDate(revenue.date) }}</p>\n              <p>Catégorie: {{ revenue.category }}</p>\n              <p>Montant: {{ formatAmount(revenue.amount) }}</p>\n              <p>Description: {{ revenue.description }}</p>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: []\n    };\n  },\n  computed: {\n    expenses() {\n      return this.transactions.filter(transaction => transaction.category === 'dépense');\n    },\n    revenues() {\n      return this.transactions.filter(transaction => transaction.category === 'revenu');\n    }\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Tailwind classes are handling all the styling needs. If you have custom styles, you can add them here */\n</style>\n"],"mappings":"AAuCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACF,YAAY,CAACG,MAAM,CAACC,WAAU,IAAKA,WAAW,CAACC,QAAO,KAAM,SAAS,CAAC;IACpF,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACN,YAAY,CAACG,MAAM,CAACC,WAAU,IAAKA,WAAW,CAACC,QAAO,KAAM,QAAQ,CAAC;IACnF;EACF,CAAC;EACDE,KAAK,EAAE;IACLZ,SAAS,EAAE;MACTa,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC1B;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAAE,kCAAiC,IAAI,CAAClB,SAAU,eAAc,CAAC;QACjG,IAAI,CAACK,YAAW,GAAIY,QAAQ,CAACb,IAAI;MACnC,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF,CAAC;IACDE,UAAUA,CAACC,IAAI,EAAE;MACf,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;IACnD,CAAC;IACDC,YAAYA,CAACC,MAAM,EAAE;MACnB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;IAC9F;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}