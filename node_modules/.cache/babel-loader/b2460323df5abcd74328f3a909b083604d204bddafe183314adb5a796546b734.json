{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        date: '',\n        category: '',\n        amount: 0,\n        description: ''\n      }\n    };\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      try {\n        const accountId = this.$route.params.id;\n        await axios.post(`http://localhost:3000/accounts/${accountId}/transactions`, this.transaction);\n        alert('Transaction créée avec succès!');\n        this.transaction = {\n          date: '',\n          category: '',\n          amount: 0,\n          description: ''\n        };\n        await this.fetchAccountDetails();\n      } catch (error) {\n        console.error('Erreur lors de la création de la transaction', error);\n        alert('Erreur lors de la création de la transaction');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","accountDetails","transaction","date","category","amount","description","created","fetchAccountDetails","methods","accountId","$route","params","id","response","get","error","console","createTransaction","post","alert"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Détails du Compte</h2>\n    <p>Nom du Compte: {{ accountDetails.accountName }}</p>\n    <p>Solde: {{ accountDetails.balance }} {{ accountDetails.currency }}</p>\n\n    <h3>Créer une Transaction</h3>\n    <form @submit.prevent=\"createTransaction\">\n      <div>\n        <label for=\"date\">Date:</label>\n        <input type=\"date\" id=\"date\" v-model=\"transaction.date\" required>\n      </div>\n      <div>\n        <label for=\"category\">Catégorie:</label>\n        <input type=\"text\" id=\"category\" v-model=\"transaction.category\" required>\n      </div>\n      <div>\n        <label for=\"amount\">Montant:</label>\n        <input type=\"number\" id=\"amount\" v-model=\"transaction.amount\" required>\n      </div>\n      <div>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" v-model=\"transaction.description\"></textarea>\n      </div>\n      <button type=\"submit\">Soumettre la Transaction</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        date: '',\n        category: '',\n        amount: 0,\n        description: ''\n      }\n    };\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      try {\n        const accountId = this.$route.params.id;\n        await axios.post(`http://localhost:3000/accounts/${accountId}/transactions`, this.transaction);\n        alert('Transaction créée avec succès!');\n        this.transaction = { date: '', category: '', amount: 0, description: '' };\n        await this.fetchAccountDetails();\n      } catch (error) {\n        console.error('Erreur lors de la création de la transaction', error);\n        alert('Erreur lors de la création de la transaction');\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Ajoutez du style si nécessaire */\n</style>"],"mappings":"AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,CAAC,CAAC;MAClBC,WAAW,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,CAAC;QACTC,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAE,kCAAiCL,SAAU,EAAC,CAAC;QAC/E,IAAI,CAACT,cAAa,GAAIa,QAAQ,CAACd,IAAI;MACrC,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;IACF,CAAC;IACD,MAAME,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMR,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMf,KAAK,CAACqB,IAAI,CAAE,kCAAiCT,SAAU,eAAc,EAAE,IAAI,CAACR,WAAW,CAAC;QAC9FkB,KAAK,CAAC,gCAAgC,CAAC;QACvC,IAAI,CAAClB,WAAU,GAAI;UAAEC,IAAI,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,MAAM,EAAE,CAAC;UAAEC,WAAW,EAAE;QAAG,CAAC;QACzE,MAAM,IAAI,CAACE,mBAAmB,CAAC,CAAC;MAClC,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;QACpEI,KAAK,CAAC,8CAA8C,CAAC;MACvD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}