{"ast":null,"code":"import axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue'; // Assurez-vous que le chemin d'importation est correct\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n  },\n  data() {\n    return {\n      // Set initial values to avoid errors before the actual data is fetched\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR',\n        // Replace 'EUR' with your default or expected currency\n        accountName: '',\n        initialBalance: 0,\n        // Ajoutez cette ligne\n\n        id: null\n      }\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n      // Vérifiez si accountDetails contient les propriétés nécessaires pour éviter des erreurs\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.initialBalance);\n      }\n      // Retournez un espace réservé ou une chaîne vide si les données ne sont pas encore disponibles\n      return 'Chargement...';\n    },\n    formattedBalance() {\n      // Check if accountDetails has the necessary properties to avoid errors\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      // Return a placeholder or empty string if the data is not yet available\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n      try {\n        const accountResponse = await fetch(accountUrl);\n        const incomeResponse = await fetch(incomeUrl);\n        const expensesResponse = await fetch(expensesUrl);\n        if (accountResponse.ok && incomeResponse.ok && expensesResponse.ok) {\n          const accountData = await accountResponse.json();\n          const incomeData = await incomeResponse.json();\n          const expensesData = await expensesResponse.json();\n          this.accountData = accountData;\n          this.totalIncome = incomeData.totalIncome;\n          this.totalExpenses = expensesData.totalExpenses;\n          this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n        }\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","TransactionForm","TransactionList","AccountChart","name","components","data","accountDetails","balance","currency","accountName","initialBalance","id","computed","formattedInitialBalance","Intl","NumberFormat","style","format","formattedBalance","created","fetchAccountDetails","methods","fetchAccountData","accountUrl","accountId","incomeUrl","expensesUrl","accountResponse","fetch","incomeResponse","expensesResponse","ok","accountData","json","incomeData","expensesData","totalIncome","totalExpenses","currentBalance","error","console"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["\n<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n    \n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Initial:</p>\n      <p class=\"mb-4\">{{ formattedInitialBalance }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Actuel:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n    </div>\n    \n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n      ref=\"transactionList\" \n      :accountId=\"accountDetails.id\"\n    />\n    <AccountChart :accountId=\"accountDetails.id\" />\n\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue'; // Assurez-vous que le chemin d'importation est correct\n\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n    \n  },\n  data() {\n    return {\n      // Set initial values to avoid errors before the actual data is fetched\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR', // Replace 'EUR' with your default or expected currency\n        accountName: '',\n        initialBalance: 0, // Ajoutez cette ligne\n\n        id: null\n      }\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n    // Vérifiez si accountDetails contient les propriétés nécessaires pour éviter des erreurs\n    if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: this.accountDetails.currency\n      }).format(this.accountDetails.initialBalance);\n    }\n    // Retournez un espace réservé ou une chaîne vide si les données ne sont pas encore disponibles\n    return 'Chargement...';\n  },\n    formattedBalance() {\n      // Check if accountDetails has the necessary properties to avoid errors\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      // Return a placeholder or empty string if the data is not yet available\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n\n      try {\n        const accountResponse = await fetch(accountUrl);\n        const incomeResponse = await fetch(incomeUrl);\n        const expensesResponse = await fetch(expensesUrl);\n\n        if (accountResponse.ok && incomeResponse.ok && expensesResponse.ok) {\n          const accountData = await accountResponse.json();\n          const incomeData = await incomeResponse.json();\n          const expensesData = await expensesResponse.json();\n\n          this.accountData = accountData;\n          this.totalIncome = incomeData.totalIncome;\n          this.totalExpenses = expensesData.totalExpenses;\n          this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n        }\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n\n\n"],"mappings":"AA8BA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,YAAW,MAAO,gCAAgC,EAAE;;AAG3D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVJ,eAAe;IACfC,eAAe;IACfC;EAEF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,cAAc,EAAE;QACdC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,KAAK;QAAE;QACjBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC;QAAE;;QAEnBC,EAAE,EAAE;MACN;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,uBAAuBA,CAAA,EAAG;MAC1B;MACA,IAAI,OAAO,IAAI,CAACP,cAAc,CAACE,QAAO,KAAM,QAAO,IAAK,OAAO,IAAI,CAACF,cAAc,CAACI,cAAa,KAAM,QAAQ,EAAE;QAC9G,OAAO,IAAII,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;UACpCC,KAAK,EAAE,UAAU;UACjBR,QAAQ,EAAE,IAAI,CAACF,cAAc,CAACE;QAChC,CAAC,CAAC,CAACS,MAAM,CAAC,IAAI,CAACX,cAAc,CAACI,cAAc,CAAC;MAC/C;MACA;MACA,OAAO,eAAe;IACxB,CAAC;IACCQ,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,OAAO,IAAI,CAACZ,cAAc,CAACE,QAAO,KAAM,QAAO,IAAK,OAAO,IAAI,CAACF,cAAc,CAACC,OAAM,KAAM,QAAQ,EAAE;QACvG,OAAO,IAAIO,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;UACpCC,KAAK,EAAE,UAAU;UACjBR,QAAQ,EAAE,IAAI,CAACF,cAAc,CAACE;QAChC,CAAC,CAAC,CAACS,MAAM,CAAC,IAAI,CAACX,cAAc,CAACC,OAAO,CAAC;MACxC;MACA;MACA,OAAO,eAAe;IACxB;EACF,CAAC;EACD,MAAMY,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,gBAAgBA,CAAA,EAAG;MACvB;MACA,MAAMC,UAAS,GAAK,kCAAiC,IAAI,CAACC,SAAU,EAAC;MACrE,MAAMC,SAAQ,GAAK,kCAAiC,IAAI,CAACD,SAAU,sBAAqB;MACxF,MAAME,WAAU,GAAK,kCAAiC,IAAI,CAACF,SAAU,wBAAuB;MAE5F,IAAI;QACF,MAAMG,eAAc,GAAI,MAAMC,KAAK,CAACL,UAAU,CAAC;QAC/C,MAAMM,cAAa,GAAI,MAAMD,KAAK,CAACH,SAAS,CAAC;QAC7C,MAAMK,gBAAe,GAAI,MAAMF,KAAK,CAACF,WAAW,CAAC;QAEjD,IAAIC,eAAe,CAACI,EAAC,IAAKF,cAAc,CAACE,EAAC,IAAKD,gBAAgB,CAACC,EAAE,EAAE;UAClE,MAAMC,WAAU,GAAI,MAAML,eAAe,CAACM,IAAI,CAAC,CAAC;UAChD,MAAMC,UAAS,GAAI,MAAML,cAAc,CAACI,IAAI,CAAC,CAAC;UAC9C,MAAME,YAAW,GAAI,MAAML,gBAAgB,CAACG,IAAI,CAAC,CAAC;UAElD,IAAI,CAACD,WAAU,GAAIA,WAAW;UAC9B,IAAI,CAACI,WAAU,GAAIF,UAAU,CAACE,WAAW;UACzC,IAAI,CAACC,aAAY,GAAIF,YAAY,CAACE,aAAa;UAC/C,IAAI,CAACC,cAAa,GAAI,IAAI,CAACN,WAAW,CAACtB,cAAa,GAAI,IAAI,CAAC0B,WAAU,GAAI,IAAI,CAACC,aAAa;QAC/F;MACF,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}