{"ast":null,"code":"import axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\nimport { ref, onMounted } from 'vue';\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: [],\n      chartData: null,\n      chartOptions: null,\n      chartRef: ref(null)\n    };\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n        // Ici, vous devez préparer chartData et chartOptions basé sur les transactions\n        this.prepareChartData();\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    prepareChartData() {\n      // Préparez les données pour votre graphique ici\n      // Vous devez créer un objet conforme aux exigences de Chart.js\n      this.chartData = {\n        // ... votre configuration de données\n      };\n      this.chartOptions = {\n        // ... vos options de graphique\n      };\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: 'EUR'\n      }).format(amount);\n    }\n  },\n  mounted() {\n    Chart.register(...registerables);\n    this.chartRef = new Chart(this.$refs.chartRef, {\n      type: 'line',\n      data: this.chartData,\n      options: this.chartOptions\n    });\n  }\n};","map":{"version":3,"names":["axios","Chart","registerables","ref","onMounted","name","props","accountId","type","Number","required","data","transactions","chartData","chartOptions","chartRef","watch","immediate","handler","fetchTransactions","methods","response","get","prepareChartData","error","console","formatDate","date","Date","toLocaleDateString","formatAmount","amount","Intl","NumberFormat","style","currency","format","mounted","register","$refs","options"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-4\">\n    <h2 class=\"text-2xl font-semibold mb-4\">Transactions</h2>\n    <ul v-if=\"transactions.length\" class=\"bg-white shadow-md rounded-lg overflow-hidden\">\n      <li v-for=\"transaction in transactions\" :key=\"transaction.id\" class=\"px-6 py-4 border-b hover:bg-gray-100\">\n        <div class=\"flex justify-between items-center\">\n          <!-- Section pour Revenus -->\n          <div v-if=\"transaction.category === 'revenu'\" class=\"flex items-center space-x-4\">\n            <span class=\"p-2 inline-flex items-center justify-center text-green-500\">\n              <i class=\"fas fa-arrow-down\"></i> <!-- Icone de revenu -->\n            </span>\n            <div class=\"flex-1\">\n              <p class=\"text-sm font-semibold text-gray-600\">Revenu</p>\n              <p class=\"text-gray-800\">{{ transaction.description }}</p>\n              <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n            </div>\n            <span class=\"text-green-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n          </div>\n          \n          <!-- Placeholder quand il n'y a pas de revenu -->\n          <div v-else class=\"flex-1\"></div>\n          \n          <!-- Section pour Dépenses -->\n          <div v-if=\"transaction.category === 'dépense'\" class=\"flex items-center justify-end space-x-4\">\n            <span class=\"text-red-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n            <div class=\"flex-1 text-right\">\n              <p class=\"text-sm font-semibold text-gray-600\">Dépense</p>\n              <p class=\"text-gray-800\">{{ transaction.description }}</p>\n              <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n            </div>\n            <span class=\"p-2 inline-flex items-center justify-center text-red-500\">\n              <i class=\"fas fa-arrow-up\"></i> <!-- Icone de dépense -->\n            </span>\n          </div>\n          \n          <!-- Placeholder quand il n'y a pas de dépense -->\n          <div v-else class=\"text-red-500\"></div>\n        </div>\n      </li>\n    </ul>\n    <div v-else class=\"text-center py-4\">\n      <p>Aucune transaction disponible.</p>\n    </div>\n    <div class=\"mt-8\">\n      <canvas ref=\"chartRef\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: [],\n      chartData: null,\n      chartOptions: null,\n      chartRef: ref(null),\n    };\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n        // Ici, vous devez préparer chartData et chartOptions basé sur les transactions\n        this.prepareChartData();\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    prepareChartData() {\n      // Préparez les données pour votre graphique ici\n      // Vous devez créer un objet conforme aux exigences de Chart.js\n      this.chartData = {\n        // ... votre configuration de données\n      };\n      this.chartOptions = {\n        // ... vos options de graphique\n      };\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n    }\n  },\n  mounted() {\n    Chart.register(...registerables);\n    this.chartRef = new Chart(this.$refs.chartRef, {\n      type: 'line',\n      data: this.chartData,\n      options: this.chartOptions,\n    });\n  }\n};\n</script>\n\n<style scoped>\n/* Tailwind classes are handling all the styling needs. If you have custom styles, you can add them here */\n</style>\n"],"mappings":"AAkDA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/C,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAEZ,GAAG,CAAC,IAAI;IACpB,CAAC;EACH,CAAC;EACDa,KAAK,EAAE;IACLT,SAAS,EAAE;MACTU,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC1B;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAE,kCAAiC,IAAI,CAACf,SAAU,eAAc,CAAC;QACjG,IAAI,CAACK,YAAW,GAAIS,QAAQ,CAACV,IAAI;QACjC;QACA,IAAI,CAACY,gBAAgB,CAAC,CAAC;MACzB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF,CAAC;IACDD,gBAAgBA,CAAA,EAAG;MACjB;MACA;MACA,IAAI,CAACV,SAAQ,GAAI;QACf;MAAA,CACD;MACD,IAAI,CAACC,YAAW,GAAI;QAClB;MAAA,CACD;IACH,CAAC;IACDY,UAAUA,CAACC,IAAI,EAAE;MACf,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;IACnD,CAAC;IACDC,YAAYA,CAACC,MAAM,EAAE;MACnB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;IAC9F;EACF,CAAC;EACDM,OAAOA,CAAA,EAAG;IACRpC,KAAK,CAACqC,QAAQ,CAAC,GAAGpC,aAAa,CAAC;IAChC,IAAI,CAACa,QAAO,GAAI,IAAId,KAAK,CAAC,IAAI,CAACsC,KAAK,CAACxB,QAAQ,EAAE;MAC7CP,IAAI,EAAE,MAAM;MACZG,IAAI,EAAE,IAAI,CAACE,SAAS;MACpB2B,OAAO,EAAE,IAAI,CAAC1B;IAChB,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}