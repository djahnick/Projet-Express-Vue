{"ast":null,"code":"import AccountChart from '../components/AccountChart.vue';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nexport default {\n  name: 'AccountDetails',\n  props: ['selectedAccount'],\n  // if selectedAccount is a prop\n  data() {\n    return {\n      // Ensure that these are initialized correctly, potentially as props\n      accountData: null,\n      totalIncome: 0,\n      totalExpenses: 0,\n      currentBalance: 0,\n      accountId: null // Initialize or retrieve from somewhere\n    };\n  },\n\n  components: {\n    AccountChart,\n    TransactionForm,\n    TransactionList\n  },\n  created() {\n    this.fetchAccountData();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n      try {\n        const [accountResponse, incomeResponse, expensesResponse] = await Promise.all([fetch(accountUrl), fetch(incomeUrl), fetch(expensesUrl)]);\n        if (!accountResponse.ok || !incomeResponse.ok || !expensesResponse.ok) {\n          throw new Error('One or more responses were not ok.');\n        }\n        const [accountData, incomeData, expensesData] = await Promise.all([accountResponse.json(), incomeResponse.json(), expensesResponse.json()]);\n        this.accountData = accountData;\n        this.totalIncome = incomeData.totalIncome;\n        this.totalExpenses = expensesData.totalExpenses;\n        this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n        // Handle the error appropriately\n      }\n    }\n  }\n};","map":{"version":3,"names":["AccountChart","TransactionForm","TransactionList","name","props","data","accountData","totalIncome","totalExpenses","currentBalance","accountId","components","created","fetchAccountData","methods","accountUrl","incomeUrl","expensesUrl","accountResponse","incomeResponse","expensesResponse","Promise","all","fetch","ok","Error","incomeData","expensesData","json","initialBalance","error","console"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Display Account Information -->\n    <div>\n      <h2>Account Information</h2>\n      <div v-if=\"accountData\">\n        <p><strong>Account Name:</strong> {{ accountData.accountName }}</p>\n        <p><strong>Initial Balance:</strong> {{ accountData.initialBalance }} {{ accountData.currency }}</p>\n        <p><strong>Current Balance:</strong> {{ currentBalance }} {{ accountData.currency }}</p>\n        <p><strong>Total Income:</strong> {{ totalIncome }} {{ accountData.currency }}</p>\n        <p><strong>Total Expenses:</strong> {{ totalExpenses }} {{ accountData.currency }}</p>\n      </div>\n      <div v-else>\n        <p>No account selected.</p>\n      </div>\n    </div>\n    \n    <!-- Display Account Chart -->\n    <AccountChart :account=\"selectedAccount\" />\n\n    <!-- Transaction Form -->\n    <TransactionForm :account=\"selectedAccount\" />\n\n    <!-- Transaction List -->\n    <TransactionList :account=\"selectedAccount\" />\n  </div>\n</template>\n\n<script>\nimport AccountChart from '../components/AccountChart.vue';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\n\nexport default {\n  name: 'AccountDetails',\n  props: ['selectedAccount'], // if selectedAccount is a prop\n  data() {\n    return {\n      // Ensure that these are initialized correctly, potentially as props\n      accountData: null,\n      totalIncome: 0,\n      totalExpenses: 0,\n      currentBalance: 0,\n      accountId: null, // Initialize or retrieve from somewhere\n    };\n  },\n  components: {\n    AccountChart,\n    TransactionForm,\n    TransactionList,\n  },\n  created() {\n    this.fetchAccountData();\n  },\n  methods: {\n    async fetchAccountData() {\n      // Replace with the actual API endpoint URL and account ID\n      const accountUrl = `http://localhost:3000/accounts/${this.accountId}`;\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/income`;\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountId}/transactions/expenses`;\n\n      try {\n        const [accountResponse, incomeResponse, expensesResponse] = await Promise.all([\n          fetch(accountUrl),\n          fetch(incomeUrl),\n          fetch(expensesUrl)\n        ]);\n\n        if (!accountResponse.ok || !incomeResponse.ok || !expensesResponse.ok) {\n          throw new Error('One or more responses were not ok.');\n        }\n\n        const [accountData, incomeData, expensesData] = await Promise.all([\n          accountResponse.json(),\n          incomeResponse.json(),\n          expensesResponse.json()\n        ]);\n\n        this.accountData = accountData;\n        this.totalIncome = incomeData.totalIncome;\n        this.totalExpenses = expensesData.totalExpenses;\n        this.currentBalance = this.accountData.initialBalance + this.totalIncome - this.totalExpenses;\n\n      } catch (error) {\n        console.error(\"There was an error fetching the account data:\", error);\n        // Handle the error appropriately\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AA6BA,OAAOA,YAAW,MAAO,gCAAgC;AACzD,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAE/D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,CAAC,iBAAiB,CAAC;EAAE;EAC5BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE,CAAC;MACjBC,SAAS,EAAE,IAAI,CAAE;IACnB,CAAC;EACH,CAAC;;EACDC,UAAU,EAAE;IACVX,YAAY;IACZC,eAAe;IACfC;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,gBAAgBA,CAAA,EAAG;MACvB;MACA,MAAME,UAAS,GAAK,kCAAiC,IAAI,CAACL,SAAU,EAAC;MACrE,MAAMM,SAAQ,GAAK,kCAAiC,IAAI,CAACN,SAAU,sBAAqB;MACxF,MAAMO,WAAU,GAAK,kCAAiC,IAAI,CAACP,SAAU,wBAAuB;MAE5F,IAAI;QACF,MAAM,CAACQ,eAAe,EAAEC,cAAc,EAAEC,gBAAgB,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5EC,KAAK,CAACR,UAAU,CAAC,EACjBQ,KAAK,CAACP,SAAS,CAAC,EAChBO,KAAK,CAACN,WAAW,EAClB,CAAC;QAEF,IAAI,CAACC,eAAe,CAACM,EAAC,IAAK,CAACL,cAAc,CAACK,EAAC,IAAK,CAACJ,gBAAgB,CAACI,EAAE,EAAE;UACrE,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;QACvD;QAEA,MAAM,CAACnB,WAAW,EAAEoB,UAAU,EAAEC,YAAY,IAAI,MAAMN,OAAO,CAACC,GAAG,CAAC,CAChEJ,eAAe,CAACU,IAAI,CAAC,CAAC,EACtBT,cAAc,CAACS,IAAI,CAAC,CAAC,EACrBR,gBAAgB,CAACQ,IAAI,CAAC,EACvB,CAAC;QAEF,IAAI,CAACtB,WAAU,GAAIA,WAAW;QAC9B,IAAI,CAACC,WAAU,GAAImB,UAAU,CAACnB,WAAW;QACzC,IAAI,CAACC,aAAY,GAAImB,YAAY,CAACnB,aAAa;QAC/C,IAAI,CAACC,cAAa,GAAI,IAAI,CAACH,WAAW,CAACuB,cAAa,GAAI,IAAI,CAACtB,WAAU,GAAI,IAAI,CAACC,aAAa;MAE/F,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;QACrE;MACF;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}