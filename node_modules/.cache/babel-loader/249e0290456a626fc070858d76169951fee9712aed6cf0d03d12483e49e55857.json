{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { LineChart } from 'vue-chart-3';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  components: {\n    LineChart\n  },\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartData = ref({\n      labels: [],\n      datasets: [{\n        label: 'Balance over Time',\n        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n        borderColor: 'rgb(54, 162, 235)',\n        fill: false,\n        data: []\n      }]\n    });\n    const chartOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    });\n    onMounted(() => {\n      fetchTransactions();\n    });\n    async function fetchTransactions() {\n      try {\n        const response = await fetch(`/accounts/${props.accountId}/transactions`);\n        if (!response.ok) throw new Error('Failed to fetch transactions');\n        const transactions = await response.json();\n        updateChartData(transactions);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    }\n    function updateChartData(transactions) {\n      const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n      let balance = 0;\n      sortedTransactions.forEach(transaction => {\n        balance += transaction.amount;\n        chartData.value.labels.push(new Date(transaction.date).toLocaleDateString());\n        chartData.value.datasets[0].data.push(balance);\n      });\n    }\n    return {\n      chartData,\n      chartOptions\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","LineChart","Chart","registerables","register","components","props","accountId","type","Number","required","setup","chartData","labels","datasets","label","backgroundColor","borderColor","fill","data","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","fetchTransactions","response","fetch","ok","Error","transactions","json","updateChartData","error","console","sortedTransactions","sort","a","b","Date","date","balance","forEach","transaction","amount","value","push","toLocaleDateString"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted } from 'vue';\n  import { LineChart } from 'vue-chart-3';\n  import { Chart, registerables } from 'chart.js';\n  Chart.register(...registerables);\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    props: {\n      accountId: {\n        type: Number,\n        required: true,\n      }\n    },\n    setup(props) {\n      const chartData = ref({\n        labels: [],\n        datasets: [{\n          label: 'Balance over Time',\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgb(54, 162, 235)',\n          fill: false,\n          data: []\n        }]\n      });\n      const chartOptions = ref({\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: false\n          }\n        }\n      });\n  \n      onMounted(() => {\n        fetchTransactions();\n      });\n  \n      async function fetchTransactions() {\n        try {\n          const response = await fetch(`/accounts/${props.accountId}/transactions`);\n          if (!response.ok) throw new Error('Failed to fetch transactions');\n          const transactions = await response.json();\n  \n          updateChartData(transactions);\n        } catch (error) {\n          console.error('Error fetching transactions:', error);\n        }\n      }\n  \n      function updateChartData(transactions) {\n        const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n        let balance = 0;\n  \n        sortedTransactions.forEach(transaction => {\n          balance += transaction.amount;\n          chartData.value.labels.push(new Date(transaction.date).toLocaleDateString());\n          chartData.value.datasets[0].data.push(balance);\n        });\n      }\n  \n      return {\n        chartData,\n        chartOptions\n      };\n    },\n  };\n  </script>\n  "],"mappings":";AAOE,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,SAAQ,QAAS,aAAa;AACvC,SAASC,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAEhC,eAAe;EACbE,UAAU,EAAE;IACVJ;EACF,CAAC;EACDK,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,SAAQ,GAAIb,GAAG,CAAC;MACpBc,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAE,mBAAmB;QAC1BC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,mBAAmB;QAChCC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,YAAW,GAAIrB,GAAG,CAAC;MACvBsB,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;QACf;MACF;IACF,CAAC,CAAC;IAEFzB,SAAS,CAAC,MAAM;MACd0B,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,eAAeA,iBAAiBA,CAAA,EAAG;MACjC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAE,aAAYtB,KAAK,CAACC,SAAU,eAAc,CAAC;QACzE,IAAI,CAACoB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjE,MAAMC,YAAW,GAAI,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAE1CC,eAAe,CAACF,YAAY,CAAC;MAC/B,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF;IAEA,SAASD,eAAeA,CAACF,YAAY,EAAE;MACrC,MAAMK,kBAAiB,GAAIL,YAAY,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,IAAI,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;MAC3F,IAAIC,OAAM,GAAI,CAAC;MAEfN,kBAAkB,CAACO,OAAO,CAACC,WAAU,IAAK;QACxCF,OAAM,IAAKE,WAAW,CAACC,MAAM;QAC7BjC,SAAS,CAACkC,KAAK,CAACjC,MAAM,CAACkC,IAAI,CAAC,IAAIP,IAAI,CAACI,WAAW,CAACH,IAAI,CAAC,CAACO,kBAAkB,CAAC,CAAC,CAAC;QAC5EpC,SAAS,CAACkC,KAAK,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC4B,IAAI,CAACL,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ;IAEA,OAAO;MACL9B,SAAS;MACTQ;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}