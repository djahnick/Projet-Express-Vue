{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e1e7ce2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Détails du Compte\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Créer une Transaction\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Transactions\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Nom du Compte: \" + _toDisplayString($data.accountDetails.accountName), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Solde: \" + _toDisplayString($data.accountDetails.balance) + \" \" + _toDisplayString($data.accountDetails.currency), 1 /* TEXT */), _createCommentVNode(\" Formulaire de Création de Transaction \"), _hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.createTransaction && $options.createTransaction(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" ...champs du formulaire de transaction... \")], 32 /* HYDRATE_EVENTS */), _createCommentVNode(\" Liste des Transactions \"), _hoisted_3, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.transactions, transaction => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: transaction.id\n    }, _toDisplayString(transaction.date) + \" - \" + _toDisplayString(transaction.category) + \" - \" + _toDisplayString(transaction.amount) + \" \" + _toDisplayString($data.accountDetails.currency) + \" - \" + _toDisplayString(transaction.description), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","accountDetails","accountName","balance","currency","_createCommentVNode","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","createTransaction","_hoisted_3","_Fragment","_renderList","transactions","transaction","key","id","date","category","amount","description"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Détails du Compte</h2>\n    <p>Nom du Compte: {{ accountDetails.accountName }}</p>\n    <p>Solde: {{ accountDetails.balance }} {{ accountDetails.currency }}</p>\n\n    <!-- Formulaire de Création de Transaction -->\n    <h3>Créer une Transaction</h3>\n    <form @submit.prevent=\"createTransaction\">\n      <!-- ...champs du formulaire de transaction... -->\n    </form>\n\n    <!-- Liste des Transactions -->\n    <h3>Transactions</h3>\n    <ul>\n      <li v-for=\"transaction in transactions\" :key=\"transaction.id\">\n        {{ transaction.date }} - {{ transaction.category }} - {{ transaction.amount }} {{ accountDetails.currency }} - {{ transaction.description }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        date: '',\n        category: '',\n        amount: 0,\n        description: ''\n      },\n      transactions: []  // Ajout de la liste des transactions\n    };\n  },\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTransactions();  // Récupérer les transactions dès le chargement\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      // ...logique de création de transaction...\n    },\n    async fetchTransactions() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Ajoutez du style si nécessaire */\n</style>\n"],"mappings":";;gEAEIA,mBAAA,CAA0B,YAAtB,mBAAiB;gEAKrBA,mBAAA,CAA8B,YAA1B,uBAAqB;gEAMzBA,mBAAA,CAAqB,YAAjB,cAAY;;;uBAZlBC,mBAAA,CAkBM,cAjBJC,UAA0B,EAC1BF,mBAAA,CAAsD,WAAnD,iBAAe,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,cAAc,CAACC,WAAW,kBAC/CN,mBAAA,CAAwE,WAArE,SAAO,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,cAAc,CAACE,OAAO,IAAG,GAAC,GAAAJ,gBAAA,CAAGC,KAAA,CAAAC,cAAc,CAACG,QAAQ,kBAEjEC,mBAAA,2CAA8C,EAC9CC,UAA8B,EAC9BV,mBAAA,CAEO;IAFAW,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;MACtCL,mBAAA,+CAAkD,C,4BAGpDA,mBAAA,4BAA+B,EAC/BQ,UAAqB,EACrBjB,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKiB,SAAA,QAAAC,WAAA,CAFqBf,KAAA,CAAAgB,YAAY,EAA3BC,WAAW;yBAAtBpB,mBAAA,CAEK;MAFoCqB,GAAG,EAAED,WAAW,CAACE;wBACrDF,WAAW,CAACG,IAAI,IAAG,KAAG,GAAArB,gBAAA,CAAGkB,WAAW,CAACI,QAAQ,IAAG,KAAG,GAAAtB,gBAAA,CAAGkB,WAAW,CAACK,MAAM,IAAG,GAAC,GAAAvB,gBAAA,CAAGC,KAAA,CAAAC,cAAc,CAACG,QAAQ,IAAG,KAAG,GAAAL,gBAAA,CAAGkB,WAAW,CAACM,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}