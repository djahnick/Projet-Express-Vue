{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3e5c16c8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container mx-auto p-4\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"text-2xl font-semibold mb-4\"\n}, \"Transactions\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"mt-8\"\n};\nconst _hoisted_4 = {\n  ref: \"chartRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" ... le reste de votre template ... \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"canvas\", _hoisted_4, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","ref","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-4\">\n    <h2 class=\"text-2xl font-semibold mb-4\">Transactions</h2>\n    <!-- ... le reste de votre template ... -->\n    <div class=\"mt-8\">\n      <canvas ref=\"chartRef\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watchEffect } from 'vue';\nimport axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\n\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: Number,\n  },\n  setup(props) {\n    const transactions = ref([]);\n    const chartRef = ref(null);\n    let chartInstance = null;\n\n    const fetchTransactions = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${props.accountId}/transactions`);\n        transactions.value = response.data;\n        prepareChartData();\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    };\n\n    const prepareChartData = () => {\n      if (chartInstance) {\n        chartInstance.destroy(); // Destroy the old chart instance if it exists\n      }\n      \n      const chartData = {\n        labels: transactions.value.map(t => t.date),\n        datasets: [{\n          label: 'Transactions',\n          data: transactions.value.map(t => t.amount),\n          // ...other dataset configurations...\n        }],\n      };\n      \n      const chartOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        // ...other options...\n      };\n\n      chartInstance = new Chart(chartRef.value, {\n        type: 'line',\n        data: chartData,\n        options: chartOptions,\n      });\n    };\n\n    watchEffect(() => {\n      if (props.accountId) {\n        fetchTransactions();\n      }\n    });\n\n    onMounted(() => {\n      Chart.register(...registerables);\n    });\n\n    const formatDate = (date) => {\n      return new Date(date).toLocaleDateString('fr-FR');\n    };\n\n    const formatAmount = (amount) => {\n      return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n    };\n\n    // Expose your methods to the template\n    return {\n      transactions,\n      chartRef,\n      formatDate,\n      formatAmount\n    };\n  }\n};\n</script>\n\n<style scoped>\n/* Tailwind classes are handling all the styling needs. If you have custom styles, you can add them here */\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAuB;gEAChCC,mBAAA,CAAyD;EAArDD,KAAK,EAAC;AAA6B,GAAC,cAAY;;EAE/CA,KAAK,EAAC;AAAM;;EACPE,GAAG,EAAC;AAAU;;uBAJ1BC,mBAAA,CAMM,OANNC,UAMM,GALJC,UAAyD,EACzDC,mBAAA,wCAA2C,EAC3CL,mBAAA,CAEM,OAFNM,UAEM,GADJN,mBAAA,CAAgC,UAAhCO,UAAgC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}