{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Détails du compte\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Transactions\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.account ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Nom du compte: \" + _toDisplayString($data.account.accountName), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Solde initial: \" + _toDisplayString($data.account.initialBalance), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Solde actuel: \" + _toDisplayString($data.account.balance), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Devise: \" + _toDisplayString($data.account.currency), 1 /* TEXT */), _hoisted_3, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.transactions, transaction => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: transaction.id\n    }, _toDisplayString(transaction.date) + \" - \" + _toDisplayString(transaction.category) + \" - \" + _toDisplayString(transaction.amount) + \" - \" + _toDisplayString(transaction.description), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.fetchTransactions && $options.fetchTransactions(...args))\n  }, \"Actualiser les Transactions\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.deleteAccount && $options.deleteAccount(...args))\n  }, \"Supprimer le Compte\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","$data","account","_hoisted_2","_toDisplayString","accountName","initialBalance","balance","currency","_hoisted_3","_Fragment","_renderList","transactions","transaction","key","id","date","category","amount","description","onClick","_cache","args","$options","fetchTransactions","deleteAccount"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Détails du compte</h1>\n    <div v-if=\"account\">\n      <p>Nom du compte: {{ account.accountName }}</p>\n      <p>Solde initial: {{ account.initialBalance }}</p>\n      <p>Solde actuel: {{ account.balance }}</p>\n      <p>Devise: {{ account.currency }}</p>\n\n      <h2>Transactions</h2>\n      <ul>\n        <li v-for=\"transaction in transactions\" :key=\"transaction.id\">\n          {{ transaction.date }} - {{ transaction.category }} - {{ transaction.amount }} - {{ transaction.description }}\n        </li>\n      </ul>\n\n      <button @click=\"fetchTransactions\">Actualiser les Transactions</button>\n      <button @click=\"deleteAccount\">Supprimer le Compte</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      account: null,\n      transactions: []\n    };\n  },\n  created() {\n    this.fetchAccountDetails();\n    this.fetchTransactions();\n  },\n  methods: {\n    fetchAccountDetails() {\n      const accountId = this.$route.params.id; // Récupérer l'ID depuis l'URL\n      axios.get(`http://localhost:3000/accounts/${accountId}`)\n        .then(response => {\n          this.account = response.data;\n        })\n        .catch(error => {\n          console.error(\"There was an error fetching the account details:\", error);\n        });\n    },\n    fetchTransactions() {\n      const accountId = this.$route.params.id; // Récupérer l'ID depuis l'URL\n      axios.get(`http://localhost:3000/accounts/${accountId}/transactions`)\n        .then(response => {\n          this.transactions = response.data;\n        })\n        .catch(error => {\n          console.error(\"There was an error fetching the transactions:\", error);\n        });\n    },\n    deleteAccount() {\n      const accountId = this.$route.params.id; // Récupérer l'ID depuis l'URL\n      axios.delete(`http://localhost:3000/accounts/${accountId}`)\n        .then(() => {\n          this.$router.push('/'); // Redirection vers la page d'accueil après la suppression\n        })\n        .catch(error => {\n          console.error(\"There was an error deleting the account:\", error);\n        });\n    }\n  }\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAA0B,YAAtB,mBAAiB;;;;gCAOnBA,mBAAA,CAAqB,YAAjB,cAAY;;;uBARpBC,mBAAA,CAkBM,cAjBJC,UAA0B,EACfC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAeM,OAAAI,UAAA,GAdJL,mBAAA,CAA+C,WAA5C,iBAAe,GAAAM,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACG,WAAW,kBACxCP,mBAAA,CAAkD,WAA/C,iBAAe,GAAAM,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACI,cAAc,kBAC3CR,mBAAA,CAA0C,WAAvC,gBAAc,GAAAM,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACK,OAAO,kBACnCT,mBAAA,CAAqC,WAAlC,UAAQ,GAAAM,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACM,QAAQ,kBAE9BC,UAAqB,EACrBX,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKW,SAAA,QAAAC,WAAA,CAFqBV,KAAA,CAAAW,YAAY,EAA3BC,WAAW;yBAAtBd,mBAAA,CAEK;MAFoCe,GAAG,EAAED,WAAW,CAACE;wBACrDF,WAAW,CAACG,IAAI,IAAG,KAAG,GAAAZ,gBAAA,CAAGS,WAAW,CAACI,QAAQ,IAAG,KAAG,GAAAb,gBAAA,CAAGS,WAAW,CAACK,MAAM,IAAG,KAAG,GAAAd,gBAAA,CAAGS,WAAW,CAACM,WAAW;oCAI/GrB,mBAAA,CAAuE;IAA9DsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;KAAE,6BAA2B,GAC9DxB,mBAAA,CAA2D;IAAlDsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,aAAA,IAAAF,QAAA,CAAAE,aAAA,IAAAH,IAAA,CAAa;KAAE,qBAAmB,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}