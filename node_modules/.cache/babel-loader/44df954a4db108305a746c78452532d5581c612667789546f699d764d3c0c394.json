{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AccountDetails',\n  data() {\n    return {\n      accountDetails: {},\n      transaction: {\n        amount: 0,\n        type: 'credit' // ou 'debit'\n      }\n    };\n  },\n\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async createTransaction() {\n      try {\n        const accountId = this.$route.params.id;\n        await axios.post(`http://localhost:3000/transactions/${accountId}`, this.transaction);\n        alert('Transaction créée avec succès!');\n        this.transaction.amount = 0;\n        this.transaction.type = 'credit';\n        await this.fetchAccountDetails(); // Mise à jour des détails du compte après la transaction\n      } catch (error) {\n        console.error('Erreur lors de la création de la transaction', error);\n        alert('Erreur lors de la création de la transaction');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","accountDetails","transaction","amount","type","created","fetchAccountDetails","methods","accountId","$route","params","id","response","get","error","console","createTransaction","post","alert"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Détails du Compte</h2>\n      <p>Nom du Compte: {{ accountDetails.accountName }}</p>\n      <p>Solde: {{ accountDetails.balance }} {{ accountDetails.currency }}</p>\n  \n      <h3>Créer une Transaction</h3>\n      <form @submit.prevent=\"createTransaction\">\n        <div>\n          <label for=\"amount\">Montant:</label>\n          <input type=\"number\" id=\"amount\" v-model=\"transaction.amount\" required>\n        </div>\n        <div>\n          <label for=\"type\">Type:</label>\n          <select id=\"type\" v-model=\"transaction.type\" required>\n            <option value=\"credit\">Crédit</option>\n            <option value=\"debit\">Débit</option>\n          </select>\n        </div>\n        <button type=\"submit\">Soumettre la Transaction</button>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'AccountDetails',\n    data() {\n      return {\n        accountDetails: {},\n        transaction: {\n          amount: 0,\n          type: 'credit' // ou 'debit'\n        }\n      };\n    },\n    async created() {\n      await this.fetchAccountDetails();\n    },\n    methods: {\n      async fetchAccountDetails() {\n        try {\n          const accountId = this.$route.params.id;\n          const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n          this.accountDetails = response.data;\n        } catch (error) {\n          console.error('Erreur lors de la récupération des détails du compte', error);\n        }\n      },\n      async createTransaction() {\n        try {\n          const accountId = this.$route.params.id;\n          await axios.post(`http://localhost:3000/transactions/${accountId}`, this.transaction);\n          alert('Transaction créée avec succès!');\n          this.transaction.amount = 0;\n          this.transaction.type = 'credit';\n          await this.fetchAccountDetails(); // Mise à jour des détails du compte après la transaction\n        } catch (error) {\n          console.error('Erreur lors de la création de la transaction', error);\n          alert('Erreur lors de la création de la transaction');\n        }\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  /* Ajoutez du style si nécessaire */\n  </style>\n  "],"mappings":"AAyBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,CAAC,CAAC;MAClBC,WAAW,EAAE;QACXC,MAAM,EAAE,CAAC;QACTC,IAAI,EAAE,QAAO,CAAE;MACjB;IACF,CAAC;EACH,CAAC;;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAE,kCAAiCL,SAAU,EAAC,CAAC;QAC/E,IAAI,CAACP,cAAa,GAAIW,QAAQ,CAACZ,IAAI;MACrC,EAAE,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;IACF,CAAC;IACD,MAAME,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMR,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMb,KAAK,CAACmB,IAAI,CAAE,sCAAqCT,SAAU,EAAC,EAAE,IAAI,CAACN,WAAW,CAAC;QACrFgB,KAAK,CAAC,gCAAgC,CAAC;QACvC,IAAI,CAAChB,WAAW,CAACC,MAAK,GAAI,CAAC;QAC3B,IAAI,CAACD,WAAW,CAACE,IAAG,GAAI,QAAQ;QAChC,MAAM,IAAI,CAACE,mBAAmB,CAAC,CAAC,EAAE;MACpC,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;QACpEI,KAAK,CAAC,8CAA8C,CAAC;MACvD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}