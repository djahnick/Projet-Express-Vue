{"ast":null,"code":"import axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList\n  },\n  data() {\n    return {\n      accountDetails: {}\n    };\n  },\n  computed: {\n    formattedBalance() {\n      // Formattez le solde pour l'afficher dans le format monétaire local\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: this.accountDetails.currency\n      }).format(this.accountDetails.balance);\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n        // Afficher un message à l'utilisateur si souhaité\n      }\n    },\n\n    async updateTransactions() {\n      await this.fetchAccountDetails(); // Rafraîchir les détails du compte\n      this.$refs.transactionList.fetchTransactions(); // Rafraîchir la liste des transactions\n    }\n  }\n};","map":{"version":3,"names":["axios","TransactionForm","TransactionList","name","components","data","accountDetails","computed","formattedBalance","Intl","NumberFormat","style","currency","format","balance","created","fetchAccountDetails","methods","accountId","$route","params","id","response","get","error","console","updateTransactions","$refs","transactionList","fetchTransactions"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n    \n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n    </div>\n    \n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n      ref=\"transactionList\" \n      :accountId=\"accountDetails.id\"\n    />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList\n  },\n  data() {\n    return {\n      accountDetails: {}\n    };\n  },\n  computed: {\n    formattedBalance() {\n      // Formattez le solde pour l'afficher dans le format monétaire local\n      return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: this.accountDetails.currency }).format(this.accountDetails.balance);\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n        // Afficher un message à l'utilisateur si souhaité\n      }\n    },\n    async updateTransactions() {\n      await this.fetchAccountDetails(); // Rafraîchir les détails du compte\n      this.$refs.transactionList.fetchTransactions(); // Rafraîchir la liste des transactions\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Les styles Tailwind devraient suffire, mais vous pouvez ajouter des styles personnalisés si nécessaire */\n</style>\n"],"mappings":"AAwBA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,eAAc,MAAO,mCAAmC;AAC/D,OAAOC,eAAc,MAAO,mCAAmC;AAE/D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IACVH,eAAe;IACfC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,CAAC;IACnB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB;MACA,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE,IAAI,CAACN,cAAc,CAACM;MAAS,CAAC,CAAC,CAACC,MAAM,CAAC,IAAI,CAACP,cAAc,CAACQ,OAAO,CAAC;IAC1I;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMtB,KAAK,CAACuB,GAAG,CAAE,kCAAiCL,SAAU,EAAC,CAAC;QAC/E,IAAI,CAACZ,cAAa,GAAIgB,QAAQ,CAACjB,IAAI;MACrC,EAAE,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;QAC5E;MACF;IACF,CAAC;;IACD,MAAME,kBAAkBA,CAAA,EAAG;MACzB,MAAM,IAAI,CAACV,mBAAmB,CAAC,CAAC,EAAE;MAClC,IAAI,CAACW,KAAK,CAACC,eAAe,CAACC,iBAAiB,CAAC,CAAC,EAAE;IAClD;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}