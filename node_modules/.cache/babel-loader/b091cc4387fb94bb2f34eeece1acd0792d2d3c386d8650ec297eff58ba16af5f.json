{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2e1e7ce2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container mx-auto p-8\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"text-2xl font-semibold mb-6\"\n}, \"Détails du Compte\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-sm font-bold mb-2\"\n}, \"Nom du Compte:\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"mb-4\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-sm font-bold mb-2\"\n}, \"Solde Initial:\", -1 /* HOISTED */));\nconst _hoisted_7 = {\n  class: \"mb-4\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-sm font-bold mb-2\"\n}, \"Solde Actuel:\", -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"mb-4\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-sm font-bold mb-2\"\n}, \"Total Revenu:\", -1 /* HOISTED */));\nconst _hoisted_11 = {\n  class: \"mb-4\"\n};\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-sm font-bold mb-2\"\n}, \"Total Dépenses:\", -1 /* HOISTED */));\nconst _hoisted_13 = {\n  class: \"mb-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TransactionForm = _resolveComponent(\"TransactionForm\");\n  const _component_TransactionList = _resolveComponent(\"TransactionList\");\n  const _component_AccountChart = _resolveComponent(\"AccountChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"p\", _hoisted_5, _toDisplayString($data.accountDetails.accountName), 1 /* TEXT */), _hoisted_6, _createElementVNode(\"p\", _hoisted_7, _toDisplayString($options.formattedInitialBalance), 1 /* TEXT */), _hoisted_8, _createElementVNode(\"p\", _hoisted_9, _toDisplayString($options.formattedBalance), 1 /* TEXT */), _createCommentVNode(\" Display Total Income and Total Expenses \"), _hoisted_10, _createElementVNode(\"p\", _hoisted_11, _toDisplayString($options.formattedTotalIncome), 1 /* TEXT */), _hoisted_12, _createElementVNode(\"p\", _hoisted_13, _toDisplayString($options.formattedTotalExpenses), 1 /* TEXT */)]), _createVNode(_component_TransactionForm, {\n    accountId: $data.accountDetails.id,\n    onTransactionCreated: $options.updateTransactions\n  }, null, 8 /* PROPS */, [\"accountId\", \"onTransactionCreated\"]), _createVNode(_component_TransactionList, {\n    ref: \"transactionList\",\n    accountId: $data.accountDetails.id,\n    onUpdateTotals: _ctx.updateTotals,\n    onTransactionDeleted: $options.updateAccountAfterTransaction\n  }, null, 8 /* PROPS */, [\"accountId\", \"onUpdateTotals\", \"onTransactionDeleted\"]), _createVNode(_component_AccountChart, {\n    accountId: $data.accountDetails.id,\n    onDataChanged: _ctx.fetchChartData\n  }, null, 8 /* PROPS */, [\"accountId\", \"onDataChanged\"])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","$data","accountDetails","accountName","_hoisted_6","_hoisted_7","$options","formattedInitialBalance","_hoisted_8","_hoisted_9","formattedBalance","_createCommentVNode","_hoisted_10","_hoisted_11","formattedTotalIncome","_hoisted_12","_hoisted_13","formattedTotalExpenses","_createVNode","_component_TransactionForm","accountId","id","onTransactionCreated","updateTransactions","_component_TransactionList","ref","onUpdateTotals","_ctx","updateTotals","onTransactionDeleted","updateAccountAfterTransaction","_component_AccountChart","onDataChanged","fetchChartData"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n    \n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Initial:</p>\n      <p class=\"mb-4\">{{ formattedInitialBalance }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Actuel:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n\n      <!-- Display Total Income and Total Expenses -->\n      <p class=\"text-sm font-bold mb-2\">Total Revenu:</p>\n      <p class=\"mb-4\">{{ formattedTotalIncome }}</p>\n      <p class=\"text-sm font-bold mb-2\">Total Dépenses:</p>\n      <p class=\"mb-4\">{{ formattedTotalExpenses }}</p>\n    </div>\n    \n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n  ref=\"transactionList\" \n  :accountId=\"accountDetails.id\"\n  @update-totals=\"updateTotals\"\n  @transaction-deleted=\"updateAccountAfterTransaction\" \n/>\n\n<AccountChart \n  :accountId=\"accountDetails.id\" \n  @data-changed=\"fetchChartData\"\n/>\n\n\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue';\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n  },\n  data() {\n    return {\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR',\n        accountName: '',\n        initialBalance: 0,\n        id: null\n      },\n      totalIncome: null, // Ajoutez ces deux propriétés\n      totalExpenses: null\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.initialBalance);\n      }\n      return 'Chargement...';\n    },\n    formattedBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalIncome() {\n      if (typeof this.totalIncome === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalIncome);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalExpenses() {\n      if (typeof this.totalExpenses === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalExpenses);\n      }\n      return 'Chargement...';\n    },\n  },\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTotalIncome();\n    await this.fetchTotalExpenses();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async fetchTotalIncome() {\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/income`;\n      try {\n        const response = await axios.get(incomeUrl);\n        this.totalIncome = response.data.totalIncome;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des revenus', error);\n      }\n    },\n    async fetchTotalExpenses() {\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/expenses`;\n      try {\n        const response = await axios.get(expensesUrl);\n        this.totalExpenses = response.data.totalExpenses;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des dépenses', error);\n      }\n    },\n    async updateTransactions() {\n      await this.fetchAccountDetails();\n    await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n    await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n      if (this.$refs.accountChart) {\n    this.$refs.accountChart.fetchChartData();\n  }\n\n    },\n    async updateAccountAfterTransaction() {\n    await this.fetchAccountDetails(); // Refetch the account details to update the balance\n    await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n    await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n    \n\n  },\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAuB;gEAChCC,mBAAA,CAA8D;EAA1DD,KAAK,EAAC;AAA6B,GAAC,mBAAiB;;EAEpDA,KAAK,EAAC;AAAgD;gEACzDC,mBAAA,CAAoD;EAAjDD,KAAK,EAAC;AAAwB,GAAC,gBAAc;;EAC7CA,KAAK,EAAC;AAAM;gEACfC,mBAAA,CAAoD;EAAjDD,KAAK,EAAC;AAAwB,GAAC,gBAAc;;EAC7CA,KAAK,EAAC;AAAM;gEACfC,mBAAA,CAAmD;EAAhDD,KAAK,EAAC;AAAwB,GAAC,eAAa;;EAC5CA,KAAK,EAAC;AAAM;iEAGfC,mBAAA,CAAmD;EAAhDD,KAAK,EAAC;AAAwB,GAAC,eAAa;;EAC5CA,KAAK,EAAC;AAAM;iEACfC,mBAAA,CAAqD;EAAlDD,KAAK,EAAC;AAAwB,GAAC,iBAAe;;EAC9CA,KAAK,EAAC;AAAM;;;;;uBAfnBE,mBAAA,CAqCM,OArCNC,UAqCM,GApCJC,UAA8D,EAE9DH,mBAAA,CAaM,OAbNI,UAaM,GAZJC,UAAoD,EACpDL,mBAAA,CAAoD,KAApDM,UAAoD,EAAAC,gBAAA,CAAjCC,KAAA,CAAAC,cAAc,CAACC,WAAW,kBAC7CC,UAAoD,EACpDX,mBAAA,CAAiD,KAAjDY,UAAiD,EAAAL,gBAAA,CAA9BM,QAAA,CAAAC,uBAAuB,kBAC1CC,UAAmD,EACnDf,mBAAA,CAA0C,KAA1CgB,UAA0C,EAAAT,gBAAA,CAAvBM,QAAA,CAAAI,gBAAgB,kBAEnCC,mBAAA,6CAAgD,EAChDC,WAAmD,EACnDnB,mBAAA,CAA8C,KAA9CoB,WAA8C,EAAAb,gBAAA,CAA3BM,QAAA,CAAAQ,oBAAoB,kBACvCC,WAAqD,EACrDtB,mBAAA,CAAgD,KAAhDuB,WAAgD,EAAAhB,gBAAA,CAA7BM,QAAA,CAAAW,sBAAsB,iB,GAG3CC,YAAA,CAGEC,0BAAA;IAFCC,SAAS,EAAEnB,KAAA,CAAAC,cAAc,CAACmB,EAAE;IAC5BC,oBAAmB,EAAEhB,QAAA,CAAAiB;kEAGxBL,YAAA,CAKFM,0BAAA;IAJAC,GAAG,EAAC,iBAAiB;IACpBL,SAAS,EAAEnB,KAAA,CAAAC,cAAc,CAACmB,EAAE;IAC5BK,cAAa,EAAEC,IAAA,CAAAC,YAAY;IAC3BC,oBAAmB,EAAEvB,QAAA,CAAAwB;oFAGxBZ,YAAA,CAGEa,uBAAA;IAFCX,SAAS,EAAEnB,KAAA,CAAAC,cAAc,CAACmB,EAAE;IAC5BW,aAAY,EAAEL,IAAA,CAAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}