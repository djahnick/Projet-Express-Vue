{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_line_chart = _resolveComponent(\"line-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_line_chart, {\n    \"chart-data\": $setup.chartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"chart-data\", \"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_line_chart","$setup","chartData","options","chartOptions"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/AccountChart.vue"],"sourcesContent":["<template>\n    <div>\n      <line-chart :chart-data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, watchEffect } from 'vue';\n  import { LineChart } from 'vue-chart-3';\n  import { Chart, registerables } from 'chart.js';\n  import axios from 'axios';\n  \n  Chart.register(...registerables);\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    props: {\n      accountId: {\n        type: Number,\n        required: true,\n      },\n    },\n    setup(props) {\n      const chartData = ref({\n        labels: [],\n        datasets: [\n          {\n            label: 'Total Dépenses',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            borderColor: 'rgb(255, 99, 132)',\n            fill: false,\n            data: [],\n          },\n          {\n            label: 'Solde', // Updated label for total revenue\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\n            borderColor: 'rgb(54, 162, 235)',\n            fill: false,\n            data: [],\n          },\n          {\n            label: 'Total Revenus', // Updated label for account balance\n            backgroundColor: 'rgba(75, 192, 192, 0.5)',\n            borderColor: 'rgb(75, 192, 192)',\n            fill: false,\n            data: [],\n          },\n        ],\n      });\n      const chartOptions = ref({\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: false,\n          },\n        },\n      });\n  \n      async function fetchAccountDetailsAndTransactions() {\n        try {\n          const accountId = props.accountId;\n  \n          const accountResponse = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n          const accountDetails = accountResponse.data;\n  \n          const transactionsResponse = await axios.get(`http://localhost:3000/accounts/${accountId}/transactions`);\n          const transactions = transactionsResponse.data;\n  \n          updateChartData(accountDetails, transactions);\n        } catch (error) {\n          console.error('Erreur lors de la récupération des données', error);\n        }\n      }\n  \n      watchEffect(() => {\n        if (props.accountId) {\n          fetchAccountDetailsAndTransactions();\n        }\n      });\n  \n     function updateChartData(accountDetails, transactions) {\n  // Trier les transactions par date.\n  const sortedTransactions = transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Réinitialiser les étiquettes et les données pour le graphique.\n  chartData.value.labels = [];\n  chartData.value.datasets[0].data = []; // Total Dépenses\n  chartData.value.datasets[1].data = []; // Solde\n  chartData.value.datasets[2].data = []; // Total Revenus\n\n  let totalExpenses = 0;\n  let totalRevenues = 0;\n  let balance = accountDetails.initialBalance; // Utiliser le solde initial fourni par l'API.\n\n  // Ajouter le solde initial comme premier point de données.\n  chartData.value.datasets[1].data.push(balance); // Assurez-vous que c'est la bonne position pour le solde initial\n\n  sortedTransactions.forEach((transaction, index) => {\n    let transactionDate = new Date(transaction.date).toLocaleDateString('fr-FR');\n\n    // Pour la première transaction, nous devons également ajouter la première étiquette\n    if (index === 0 && !chartData.value.labels.includes(transactionDate)) {\n      chartData.value.labels.push(transactionDate);\n    }\n\n    if (transaction.category.toLowerCase() === 'dépense') {\n      totalExpenses += Math.abs(transaction.amount);\n      balance -= transaction.amount;\n    } else if (transaction.category.toLowerCase() === 'revenu') {\n      totalRevenues += transaction.amount;\n      balance += transaction.amount;\n    }\n\n    // Ajouter les nouvelles valeurs calculées aux datasets.\n    chartData.value.datasets[0].data.push(totalExpenses);\n    chartData.value.datasets[2].data.push(totalRevenues);\n\n    // Ajouter la date de la transaction si elle n'est pas déjà présente.\n    if (!chartData.value.labels.includes(transactionDate)) {\n      chartData.value.labels.push(transactionDate);\n    }\n    // Ajouter le solde mis à jour après chaque transaction.\n    chartData.value.datasets[1].data.push(balance);\n  });\n}\n\n  \n      return {\n        chartData,\n        chartOptions,\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your styles here */\n  </style>\n  "],"mappings":";;;uBACIA,mBAAA,CAEM,cADJC,YAAA,CAA8DC,qBAAA;IAAjD,YAAU,EAAEC,MAAA,CAAAC,SAAS;IAAGC,OAAO,EAAEF,MAAA,CAAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}