{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Détails du compte\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Revenus totaux: \" + _toDisplayString($setup.revenueTotal), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Dépenses totales: \" + _toDisplayString($setup.expenseTotal), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Solde total: \" + _toDisplayString($setup.balanceTotal), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$setup","revenueTotal","expenseTotal","balanceTotal"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<template>\n  <div>\n    <h3>Détails du compte</h3>\n    <p>Revenus totaux: {{ revenueTotal }}</p>\n    <p>Dépenses totales: {{ expenseTotal }}</p>\n    <p>Solde total: {{ balanceTotal }}</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  props: {\n    accountId: {\n      type: Number,\n      required: true,\n    },\n  },\n  setup(props) {\n    const revenueTotal = ref(0);\n    const expenseTotal = ref(0);\n    const balanceTotal = ref(0);\n\n    const fetchTransactions = async () => {\n      try {\n        const response = await axios.get(`/accounts/${props.accountId}/transactions`);\n        calculateTotals(response.data);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des transactions\", error);\n      }\n    };\n\n    const calculateTotals = (transactions) => {\n      transactions.forEach(transaction => {\n        if (transaction.amount >= 0) {\n          revenueTotal.value += transaction.amount;\n        } else {\n          expenseTotal.value += Math.abs(transaction.amount);\n        }\n      });\n\n      // Supposant que le solde initial est la somme des revenus moins les dépenses\n      balanceTotal.value = revenueTotal.value - expenseTotal.value;\n    };\n\n    onMounted(() => {\n      fetchTransactions();\n    });\n\n    return {\n      revenueTotal,\n      expenseTotal,\n      balanceTotal,\n    };\n  },\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAA0B,YAAtB,mBAAiB;;;uBADvBC,mBAAA,CAKM,cAJJC,UAA0B,EAC1BF,mBAAA,CAAyC,WAAtC,kBAAgB,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,YAAY,kBAClCL,mBAAA,CAA2C,WAAxC,oBAAkB,GAAAG,gBAAA,CAAGC,MAAA,CAAAE,YAAY,kBACpCN,mBAAA,CAAsC,WAAnC,eAAa,GAAAG,gBAAA,CAAGC,MAAA,CAAAG,YAAY,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}