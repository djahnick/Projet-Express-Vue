{"ast":null,"code":"import axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue';\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n  },\n  data() {\n    return {\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR',\n        accountName: '',\n        initialBalance: 0,\n        id: null\n      },\n      totalIncome: null,\n      // Ajoutez ces deux propriétés\n      totalExpenses: null\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.initialBalance);\n      }\n      return 'Chargement...';\n    },\n    formattedBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalIncome() {\n      if (typeof this.totalIncome === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalIncome);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalExpenses() {\n      if (typeof this.totalExpenses === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalExpenses);\n      }\n      return 'Chargement...';\n    }\n  },\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTotalIncome();\n    await this.fetchTotalExpenses();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async fetchTotalIncome() {\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/income`;\n      try {\n        const response = await axios.get(incomeUrl);\n        this.totalIncome = response.data.totalIncome;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des revenus', error);\n      }\n    },\n    async fetchTotalExpenses() {\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/expenses`;\n      try {\n        const response = await axios.get(expensesUrl);\n        this.totalExpenses = response.data.totalExpenses;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des dépenses', error);\n      }\n    },\n    async updateTransactions() {\n      await this.fetchAccountDetails();\n      await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n      await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n      this.refreshChart();\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n    },\n    async updateAccountAfterTransaction() {\n      await this.fetchAccountDetails(); // Refetch the account details to update the balance\n      await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n      await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n      this.refreshChart();\n    },\n    refreshChart() {\n      if (this.$refs.accountChart) {\n        this.$refs.accountChart.fetchAccountDetailsAndTransactions();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","TransactionForm","TransactionList","AccountChart","name","components","data","accountDetails","balance","currency","accountName","initialBalance","id","totalIncome","totalExpenses","computed","formattedInitialBalance","Intl","NumberFormat","style","format","formattedBalance","formattedTotalIncome","formattedTotalExpenses","created","fetchAccountDetails","fetchTotalIncome","fetchTotalExpenses","methods","accountId","$route","params","response","get","error","console","incomeUrl","expensesUrl","updateTransactions","refreshChart","$refs","transactionList","fetchTransactions","updateAccountAfterTransaction","accountChart","fetchAccountDetailsAndTransactions"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/views/AccountDetails.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto p-8\">\n    <h2 class=\"text-2xl font-semibold mb-6\">Détails du Compte</h2>\n    \n    <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n      <p class=\"text-sm font-bold mb-2\">Nom du Compte:</p>\n      <p class=\"mb-4\">{{ accountDetails.accountName }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Initial:</p>\n      <p class=\"mb-4\">{{ formattedInitialBalance }}</p>\n      <p class=\"text-sm font-bold mb-2\">Solde Actuel:</p>\n      <p class=\"mb-4\">{{ formattedBalance }}</p>\n\n      <!-- Display Total Income and Total Expenses -->\n      <p class=\"text-sm font-bold mb-2\">Total Revenu:</p>\n      <p class=\"mb-4\">{{ formattedTotalIncome }}</p>\n      <p class=\"text-sm font-bold mb-2\">Total Dépenses:</p>\n      <p class=\"mb-4\">{{ formattedTotalExpenses }}</p>\n    </div>\n    \n    <TransactionForm \n      :accountId=\"accountDetails.id\" \n      @transaction-created=\"updateTransactions\"\n    />\n\n    <TransactionList \n  ref=\"transactionList\" \n  :accountId=\"accountDetails.id\"\n  @update-totals=\"updateTotals\"\n  @transaction-deleted=\"updateAccountAfterTransaction\" \n/>\n\n<AccountChart ref=\"accountChart\" :accountId=\"accountDetails.id\" />\n\n\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TransactionForm from '../components/TransactionForm.vue';\nimport TransactionList from '../components/TransactionList.vue';\nimport AccountChart from '../components/AccountChart.vue';\n\nexport default {\n  name: 'AccountDetails',\n  components: {\n    TransactionForm,\n    TransactionList,\n    AccountChart\n  },\n  data() {\n    return {\n      accountDetails: {\n        balance: 0,\n        currency: 'EUR',\n        accountName: '',\n        initialBalance: 0,\n        id: null\n      },\n      totalIncome: null, // Ajoutez ces deux propriétés\n      totalExpenses: null\n    };\n  },\n  computed: {\n    formattedInitialBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.initialBalance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.initialBalance);\n      }\n      return 'Chargement...';\n    },\n    formattedBalance() {\n      if (typeof this.accountDetails.currency === 'string' && typeof this.accountDetails.balance === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalIncome() {\n      if (typeof this.totalIncome === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalIncome);\n      }\n      return 'Chargement...';\n    },\n    formattedTotalExpenses() {\n      if (typeof this.totalExpenses === 'number') {\n        return new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.totalExpenses);\n      }\n      return 'Chargement...';\n    },\n  },\n  async created() {\n    await this.fetchAccountDetails();\n    await this.fetchTotalIncome();\n    await this.fetchTotalExpenses();\n  },\n  methods: {\n    async fetchAccountDetails() {\n      try {\n        const accountId = this.$route.params.id;\n        const response = await axios.get(`http://localhost:3000/accounts/${accountId}`);\n        this.accountDetails = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails du compte', error);\n      }\n    },\n    async fetchTotalIncome() {\n      const incomeUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/income`;\n      try {\n        const response = await axios.get(incomeUrl);\n        this.totalIncome = response.data.totalIncome;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des revenus', error);\n      }\n    },\n    async fetchTotalExpenses() {\n      const expensesUrl = `http://localhost:3000/accounts/${this.accountDetails.id}/transactions/expenses`;\n      try {\n        const response = await axios.get(expensesUrl);\n        this.totalExpenses = response.data.totalExpenses;\n      } catch (error) {\n        console.error('Erreur lors de la récupération du total des dépenses', error);\n      }\n    },\n    async updateTransactions() {\n      await this.fetchAccountDetails();\n    await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n    await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n    this.refreshChart();\n      if (this.$refs.transactionList) {\n        this.$refs.transactionList.fetchTransactions();\n      }\n    },\n    async updateAccountAfterTransaction() {\n    await this.fetchAccountDetails(); // Refetch the account details to update the balance\n    await this.fetchTotalIncome(); // Optionally, re-fetch total income if it could be affected\n    await this.fetchTotalExpenses(); // Optionally, re-fetch total expenses if it could be affected\n    this.refreshChart();\n  },\n  refreshChart() {\n    if (this.$refs.accountChart) {\n      this.$refs.accountChart.fetchAccountDetailsAndTransactions();\n    }\n  },\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}