{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: [],\n      isEditing: false,\n      transactionToEdit: null\n    };\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency: 'EUR'\n      }).format(amount);\n    },\n    async deleteTransaction(transactionId) {\n      try {\n        const transaction = this.transactions.find(t => t.id === transactionId);\n        if (!transaction) {\n          console.error('La transaction n\\'a pas été trouvée.');\n          return;\n        }\n\n        // Mise à jour du solde actuel en fonction du type de transaction\n        if (transaction.category === 'dépense') {\n          this.accountDetails.balance += transaction.amount;\n        } else if (transaction.category === 'revenu') {\n          this.accountDetails.balance -= transaction.amount;\n        }\n\n        // Supprimez la transaction de la liste\n        const index = this.transactions.findIndex(t => t.id === transactionId);\n        if (index !== -1) {\n          this.transactions.splice(index, 1);\n        }\n\n        // Mettez à jour formattedBalance\n        this.formattedBalance = new Intl.NumberFormat('fr-FR', {\n          style: 'currency',\n          currency: this.accountDetails.currency\n        }).format(this.accountDetails.balance);\n\n        // Ensuite, supprimez la transaction du backend (votre API)\n        await axios.delete(`http://localhost:3000/transactions/${transactionId}`);\n      } catch (error) {\n        console.error('Erreur lors de la suppression de la transaction', error);\n      }\n    },\n    startEditTransaction(transaction) {\n      this.transactionToEdit = {\n        ...transaction\n      };\n      this.isEditing = true;\n    },\n    async updateTransaction() {\n      try {\n        await axios.put(`http://localhost:3000/transactions/${this.transactionToEdit.id}`, this.transactionToEdit);\n        // Mettez à jour le solde actuel en soustrayant l'ancien montant et en ajoutant le nouveau montant de la transaction mise à jour\n        const oldTransaction = this.transactions.find(t => t.id === this.transactionToEdit.id);\n        if (oldTransaction && oldTransaction.category === 'dépense') {\n          this.$emit('transaction-updated', -oldTransaction.amount);\n        }\n        this.$emit('transaction-updated', this.transactionToEdit.amount);\n        // Mettez à jour la transaction dans la liste\n        const index = this.transactions.findIndex(t => t.id === this.transactionToEdit.id);\n        this.transactions.splice(index, 1, this.transactionToEdit);\n        this.isEditing = false;\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour de la transaction', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","accountId","type","Number","required","data","transactions","isEditing","transactionToEdit","watch","immediate","handler","fetchTransactions","methods","response","get","error","console","formatDate","date","Date","toLocaleDateString","formatAmount","amount","Intl","NumberFormat","style","currency","format","deleteTransaction","transactionId","transaction","find","t","id","category","accountDetails","balance","index","findIndex","splice","formattedBalance","delete","startEditTransaction","updateTransaction","put","oldTransaction","$emit"],"sources":["/Users/djahnickefrei/monProjet/bank-frontend/src/components/TransactionList.vue"],"sourcesContent":["<!-- TransactionList.vue -->\n<template>\n  <div>\n    <div v-if=\"isEditing\" class=\"fixed inset-0 bg-black bg-opacity-50 h-full w-full flex justify-center items-center\">\n      <div class=\"bg-white p-4 rounded-lg\">\n        <form @submit.prevent=\"updateTransaction\">\n          <!-- Formulaire pour modifier la transaction -->\n          <div>\n            <label for=\"edit-description\" class=\"block text-sm font-medium text-gray-700\">Description</label>\n            <input type=\"text\" id=\"edit-description\" v-model=\"transactionToEdit.description\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4\">\n            <label for=\"edit-amount\" class=\"block text-sm font-medium text-gray-700\">Montant</label>\n            <input type=\"number\" id=\"edit-amount\" v-model=\"transactionToEdit.amount\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4\">\n            <label for=\"edit-date\" class=\"block text-sm font-medium text-gray-700\">Date</label>\n            <input type=\"date\" id=\"edit-date\" v-model=\"transactionToEdit.date\" class=\"mt-1 block w-full\" required>\n          </div>\n          <div class=\"mt-4 flex justify-end space-x-2\">\n            <button type=\"button\" @click=\"isEditing = false\" class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">\n              Annuler\n            </button>\n            <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n              Sauvegarder\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"container mx-auto p-4\">\n      <h2 class=\"text-2xl font-semibold mb-4\">Transactions</h2>\n      <ul v-if=\"transactions.length\" class=\"bg-white shadow-md rounded-lg overflow-hidden\">\n        <li v-for=\"transaction in transactions\" :key=\"transaction.id\" class=\"px-6 py-4 border-b hover:bg-gray-100\">\n          <div class=\"flex justify-between items-center\">\n            <!-- Section pour Revenus -->\n            <div v-if=\"transaction.category === 'revenu'\" class=\"flex items-center space-x-4\">\n              <span class=\"p-2 inline-flex items-center justify-center text-green-500\">\n                <i class=\"fas fa-arrow-down\"></i> <!-- Icone de revenu -->\n              </span>\n              <div class=\"flex-1\">\n                <p class=\"text-sm font-semibold text-gray-600\">Revenu</p>\n                <p class=\"text-gray-800\">{{ transaction.description }}</p>\n                <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n              </div>\n              <span class=\"text-green-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n              <button @click=\"deleteTransaction(transaction.id)\" class=\"text-red-600 hover:text-red-700\">Supprimer</button>\n              <button @click=\"startEditTransaction(transaction)\" class=\"text-blue-600 hover:text-blue-700\">\n                Modifier\n              </button>\n            </div>\n\n            <!-- Placeholder quand il n'y a pas de revenu -->\n            <div v-else class=\"flex-1\"></div>\n\n            <!-- Section pour Dépenses -->\n            <div v-if=\"transaction.category === 'dépense'\" class=\"flex items-center justify-end space-x-4\">\n              <span class=\"text-red-500 font-semibold\">{{ formatAmount(transaction.amount) }}</span>\n              <div class=\"flex-1 text-right\">\n                <p class=\"text-sm font-semibold text-gray-600\">Dépense</p>\n                <p class=\"text-gray-800\">{{ transaction.description }}</p>\n                <p class=\"text-gray-500 text-xs\">{{ formatDate(transaction.date) }}</p>\n              </div>\n              <span class=\"p-2 inline-flex items-center justify-center text-red-500\">\n                <i class=\"fas fa-arrow-up\"></i> <!-- Icone de dépense -->\n              </span>\n              <button @click=\"deleteTransaction(transaction.id)\" class=\"text-red-600 hover:text-red-700\">Supprimer</button>\n              <button @click=\"startEditTransaction(transaction)\" class=\"text-blue-600 hover:text-blue-700\">\n                Modifier\n              </button>\n            </div>\n\n            <!-- Placeholder quand il n'y a pas de dépense -->\n            <div v-else class=\"text-red-500\"></div>\n          </div>\n        </li>\n      </ul>\n      <div v-else class=\"text-center py-4\">\n        <p>Aucune transaction disponible.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TransactionList',\n  props: {\n    accountId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      transactions: [],\n      isEditing: false,\n      transactionToEdit: null\n    };\n  },\n  watch: {\n    accountId: {\n      immediate: true,\n      handler() {\n        this.fetchTransactions();\n      }\n    }\n  },\n  methods: {\n    async fetchTransactions() {\n      try {\n        const response = await axios.get(`http://localhost:3000/accounts/${this.accountId}/transactions`);\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('Erreur lors de la récupération des transactions', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('fr-FR');\n    },\n    formatAmount(amount) {\n      return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n    },\n    async deleteTransaction(transactionId) {\n  try {\n    const transaction = this.transactions.find(t => t.id === transactionId);\n\n    if (!transaction) {\n      console.error('La transaction n\\'a pas été trouvée.');\n      return;\n    }\n\n    // Mise à jour du solde actuel en fonction du type de transaction\n    if (transaction.category === 'dépense') {\n      this.accountDetails.balance += transaction.amount;\n    } else if (transaction.category === 'revenu') {\n      this.accountDetails.balance -= transaction.amount;\n    }\n\n    // Supprimez la transaction de la liste\n    const index = this.transactions.findIndex(t => t.id === transactionId);\n    if (index !== -1) {\n      this.transactions.splice(index, 1);\n    }\n\n    // Mettez à jour formattedBalance\n    this.formattedBalance = new Intl.NumberFormat('fr-FR', {\n      style: 'currency',\n      currency: this.accountDetails.currency\n    }).format(this.accountDetails.balance);\n\n    // Ensuite, supprimez la transaction du backend (votre API)\n    await axios.delete(`http://localhost:3000/transactions/${transactionId}`);\n  } catch (error) {\n    console.error('Erreur lors de la suppression de la transaction', error);\n  }\n}\n,\n    startEditTransaction(transaction) {\n      this.transactionToEdit = { ...transaction };\n      this.isEditing = true;\n    },\n    async updateTransaction() {\n      try {\n        await axios.put(`http://localhost:3000/transactions/${this.transactionToEdit.id}`, this.transactionToEdit);\n        // Mettez à jour le solde actuel en soustrayant l'ancien montant et en ajoutant le nouveau montant de la transaction mise à jour\n        const oldTransaction = this.transactions.find(t => t.id === this.transactionToEdit.id);\n        if (oldTransaction && oldTransaction.category === 'dépense') {\n          this.$emit('transaction-updated', -oldTransaction.amount);\n        }\n        this.$emit('transaction-updated', this.transactionToEdit.amount);\n        // Mettez à jour la transaction dans la liste\n        const index = this.transactions.findIndex(t => t.id === this.transactionToEdit.id);\n        this.transactions.splice(index, 1, this.transactionToEdit);\n        this.isEditing = false;\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour de la transaction', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Tailwind classes sont gérées ici */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}